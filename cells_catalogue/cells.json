{
  "cells": {
    "2": {
      "title": "cimpal-get-files-gabriel-pelouze-lifewatch-eu",
      "task_name": "cimpal-get-files-gabriel-pelouze-lifewatch-eu",
      "original_source": "conf_data_dir = '/tmp/data'\n\n\n\nminio_client = Minio(param_s3_server, access_key=param_s3_access_key, secret_key=param_s3_secret_key, secure=True)\n\nfor item in minio_client.list_objects(param_s3_bucket_input, prefix=f\"{param_s3_prefix_input}\", recursive=True):\n    target_file = f\"{conf_data_dir}/input/{item.object_name.removeprefix(param_s3_prefix_input)}\"\n    if not os.path.exists(target_file):\n        print(\"Downloading\", item.object_name)\n        minio_client.fget_object(param_s3_bucket_input, item.object_name, target_file)\n\nocc_taxa = f\"{conf_data_dir}/input/Cimpal_resources\"\nbiotope_shp_path_file = f\"{conf_data_dir}/input/Cimpal_resources\"\nweight_file = f\"{conf_data_dir}/input/Cimpal_resources/weight_wp.csv\"\npathway_file = f\"{conf_data_dir}/input/Cimpal_resources/CIMPAL_paths.csv\"\nzones_file = f\"{conf_data_dir}/input/zones\"",
      "types": {
        "occ_taxa": "str",
        "biotope_shp_path_file": "str",
        "weight_file": "str",
        "pathway_file": "str",
        "zones_file": "str",
        "param_s3_server": "str",
        "param_s3_access_key": "str",
        "param_s3_secret_key": "str",
        "param_s3_bucket_input": "str",
        "param_s3_prefix_input": "str"
      },
      "inputs": [],
      "outputs": [
        "biotope_shp_path_file",
        "occ_taxa",
        "pathway_file",
        "weight_file",
        "zones_file"
      ],
      "params": [
        "param_s3_server",
        "param_s3_access_key",
        "param_s3_secret_key",
        "param_s3_bucket_input",
        "param_s3_prefix_input"
      ],
      "param_values": {
        "param_s3_server": "scruffy.lab.uvalight.net:9000",
        "param_s3_access_key": "vl-biodt-demo",
        "param_s3_secret_key": "",
        "param_s3_bucket_input": "naa-vre-public",
        "param_s3_prefix_input": "vl-biodt-demo/"
      },
      "confs": {
        "conf_data_dir": "conf_data_dir = '/tmp/data'"
      },
      "all_inputs": [],
      "dependencies": [
        {
          "name": "Minio",
          "asname": null,
          "module": "minio"
        },
        {
          "name": "os",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "90f5336": {
            "id": "90f5336",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "cimpal-get-files-gabriel-pelouze-lifewatch-eu",
              "vars": [
                {
                  "name": "biotope_shp_path_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#2d863a"
                },
                {
                  "name": "occ_taxa",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#862d68"
                },
                {
                  "name": "pathway_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#3d862d"
                },
                {
                  "name": "weight_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#9bc587"
                },
                {
                  "name": "zones_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#8bac53"
                }
              ],
              "params": [
                "param_s3_server",
                "param_s3_access_key",
                "param_s3_secret_key",
                "param_s3_bucket_input",
                "param_s3_prefix_input"
              ],
              "inputs": [],
              "outputs": [
                "zones_file",
                "biotope_shp_path_file",
                "weight_file",
                "occ_taxa",
                "pathway_file"
              ],
              "og_node_id": "90f5336"
            },
            "ports": {
              "biotope_shp_path_file": {
                "properties": {
                  "color": "#2d863a"
                },
                "id": "biotope_shp_path_file",
                "type": "right"
              },
              "occ_taxa": {
                "properties": {
                  "color": "#862d68"
                },
                "id": "occ_taxa",
                "type": "right"
              },
              "pathway_file": {
                "properties": {
                  "color": "#3d862d"
                },
                "id": "pathway_file",
                "type": "right"
              },
              "weight_file": {
                "properties": {
                  "color": "#9bc587"
                },
                "id": "weight_file",
                "type": "right"
              },
              "zones_file": {
                "properties": {
                  "color": "#8bac53"
                },
                "id": "zones_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "90f5336",
      "container_source": "from minio import Minio\nimport os\n\nimport argparse\nimport json\narg_parser = argparse.ArgumentParser()\n\narg_parser.add_argument('--id', action='store',\n                        type=str, required=True, dest='id')\n\n\narg_parser.add_argument('--param_s3_access_key', action='store',\n                        type=str, required=True, dest='param_s3_access_key')\narg_parser.add_argument('--param_s3_bucket_input', action='store',\n                        type=str, required=True, dest='param_s3_bucket_input')\narg_parser.add_argument('--param_s3_prefix_input', action='store',\n                        type=str, required=True, dest='param_s3_prefix_input')\narg_parser.add_argument('--param_s3_secret_key', action='store',\n                        type=str, required=True, dest='param_s3_secret_key')\narg_parser.add_argument('--param_s3_server', action='store',\n                        type=str, required=True, dest='param_s3_server')\n\nargs = arg_parser.parse_args()\nprint(args)\n\nid = args.id\n\n\nparam_s3_access_key = args.param_s3_access_key.replace('\"', '')\nparam_s3_bucket_input = args.param_s3_bucket_input.replace('\"', '')\nparam_s3_prefix_input = args.param_s3_prefix_input.replace('\"', '')\nparam_s3_secret_key = args.param_s3_secret_key.replace('\"', '')\nparam_s3_server = args.param_s3_server.replace('\"', '')\n\nconf_data_dir = '/tmp/data'\n\n\nconf_data_dir = '/tmp/data'\n\n\nminio_client = Minio(param_s3_server, access_key=param_s3_access_key,\n                     secret_key=param_s3_secret_key, secure=True)\n\nfor item in minio_client.list_objects(param_s3_bucket_input, prefix=f\"{param_s3_prefix_input}\", recursive=True):\n    target_file = f\"{conf_data_dir}/input/{item.object_name.removeprefix(param_s3_prefix_input)}\"\n    if not os.path.exists(target_file):\n        print(\"Downloading\", item.object_name)\n        minio_client.fget_object(\n            param_s3_bucket_input, item.object_name, target_file)\n\nocc_taxa = f\"{conf_data_dir}/input/Cimpal_resources\"\nbiotope_shp_path_file = f\"{conf_data_dir}/input/Cimpal_resources\"\nweight_file = f\"{conf_data_dir}/input/Cimpal_resources/weight_wp.csv\"\npathway_file = f\"{conf_data_dir}/input/Cimpal_resources/CIMPAL_paths.csv\"\nzones_file = f\"{conf_data_dir}/input/zones\"\n\nfile_occ_taxa = open(\"/tmp/occ_taxa_\" + id + \".json\", \"w\")\nfile_occ_taxa.write(json.dumps(occ_taxa))\nfile_occ_taxa.close()\nfile_biotope_shp_path_file = open(\n    \"/tmp/biotope_shp_path_file_\" + id + \".json\", \"w\")\nfile_biotope_shp_path_file.write(json.dumps(biotope_shp_path_file))\nfile_biotope_shp_path_file.close()\nfile_weight_file = open(\"/tmp/weight_file_\" + id + \".json\", \"w\")\nfile_weight_file.write(json.dumps(weight_file))\nfile_weight_file.close()\nfile_pathway_file = open(\"/tmp/pathway_file_\" + id + \".json\", \"w\")\nfile_pathway_file.write(json.dumps(pathway_file))\nfile_pathway_file.close()\nfile_zones_file = open(\"/tmp/zones_file_\" + id + \".json\", \"w\")\nfile_zones_file.write(json.dumps(zones_file))\nfile_zones_file.close()\n",
      "kernel": "ipython",
      "notebook_dict": {
        "metadata": {
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "toc-autonumbering": true,
          "kernelspec": {
            "name": "python3",
            "display_name": "python3",
            "language": "python3"
          },
          "language_info": {
            "name": "python",
            "version": "3.10.14",
            "mimetype": "text/x-python",
            "codemirror_mode": {
              "name": "ipython",
              "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# cimpal-get-files\n\nimport os\nfrom minio import Minio\n\n\nminio_client = Minio(param_s3_server, access_key=param_s3_access_key, secret_key=param_s3_secret_key, secure=True)\n\nfor item in minio_client.list_objects(param_s3_bucket_input, prefix=f\"{param_s3_prefix_input}\", recursive=True):\n    target_file = f\"{conf_data_dir}/input/{item.object_name.removeprefix(param_s3_prefix_input)}\"\n    if not os.path.exists(target_file):\n        print(\"Downloading\", item.object_name)\n        minio_client.fget_object(param_s3_bucket_input, item.object_name, target_file)\n\nocc_taxa = f\"{conf_data_dir}/input/Cimpal_resources\"\nbiotope_shp_path_file = f\"{conf_data_dir}/input/Cimpal_resources\"\nweight_file = f\"{conf_data_dir}/input/Cimpal_resources/weight_wp.csv\"\npathway_file = f\"{conf_data_dir}/input/Cimpal_resources/CIMPAL_paths.csv\"\nzones_file = f\"{conf_data_dir}/input/zones\"",
            "metadata": {},
            "execution_count": 8,
            "outputs": [],
            "id": "aaf0c86a-546f-4a26-ba14-a95e9ca3d555"
          }
        ]
      },
      "base_image": {
        "build": "ghcr.io/qcdis/naavre/naavre-cell-build-biotope:v0.14",
        "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-biotope:v0.14"
      },
      "image_version": "14fe49a"
    },
    "4": {
      "title": "cimpal-calculator-gabriel-pelouze-lifewatch-eu",
      "task_name": "cimpal-calculator-gabriel-pelouze-lifewatch-eu",
      "original_source": "conf_data_dir = '/tmp/data'\n\n\nocc_and_taxa_path = occ_taxa\nbiotope_shp_path = biotope_shp_path_file\nweights_path = weight_file\npathways_path = pathway_file\n\nos.makedirs(f\"{conf_data_dir}/output/Cimpal\")\nout_path = f\"{conf_data_dir}/output/Cimpal\"\n\n\n\n\n\n\n\n\n\n\ngbif_dir = Path(occ_and_taxa_path)\nshp_dir = biotope_shp_path\nshp_files = os.listdir(shp_dir)\nimpact_matrix = weights_path\ngrid_size = param_grid_size_para\nnis_pathways_matrix_path_dir = pathways_path\n\n\notbbin = \"/usr/local/otb/bin/\"\noutpath = out_path\n\nshp_file = None\n\nfor file in shp_files:\n    if file.endswith(\".shp\"):\n        shp_file = os.path.join(shp_dir, file)\n        break\n\nif not shp_file:\n    raise FileNotFoundError(\"`.shp` file not found in zip\")\n\n\nbiotopes = str(shp_dir) + '/'\noutpath = out_path + '/'\nweight_matrix_template = weights_path\nfilter_matrix_csv = pathways_path\noccurences = str(Path(gbif_dir, \"occurrence.txt\"))\nalienTaxa = str(Path(gbif_dir, \"alientaxa.txt\"))\n\nprint(\"=================================\")\nprint(f\"biotopes {biotopes}\")\nprint(f\"outpath {outpath}\")\nprint(f\"weight_matrix_template {weight_matrix_template}\")\nprint(f\"filter_matrix_csv {filter_matrix_csv}\")\nprint(f\"occurences {occurences}\")\nprint(f\"alienTaxa {alienTaxa}\")\nprint(\"=================================\")\n\n\n\nzone_field = 'id_habitat'\nfield_name_oc = \"scientificName\"\nuseEEA = True\nLAEA=True\ngrid_size = int(param_grid_size_para)\nfield_name_radius = \"dispersionRadius\"\nradius_default = 100\nfield_name = \"Habitat\"\n\nextent_tot = [\n    100000000,\n    -100000000,\n    100000000,\n    -100000000,\n]  # initialise extent: xmin, xmax, ymin, ymax\n\nif useEEA:\n    shp_candidates = glob.glob(biotopes + \"[sS]ingle_*.shp\") + glob.glob(\n        biotopes + \"[Ll]ist_*.shp\"\n    )\n    print(len(shp_candidates))\n    for shp in [x for x in shp_candidates if not \"LAEA\" in x]:\n        print(\"reprojecting \" + shp)\n        outshp = shp[:-4] + \"_LAEA.shp\"\n        subprocess.call([\"ogr2ogr\", \"-t_srs\", \"EPSG:3035\", outshp, shp])\n        driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        dataSource = driver.Open(outshp, 0)  # 0 means read-only. 1 means writeable.\n\n        if dataSource is None:\n            print(\"Could not open %s\" % (shp))\n        else:\n            inLayer = dataSource.GetLayer()\n            extent = inLayer.GetExtent()\n            if extent[0] < extent_tot[0]:\n                extent_tot[0] = extent[0]\n            if extent[1] > extent_tot[1]:\n                extent_tot[1] = extent[1]\n            if extent[2] < extent_tot[2]:\n                extent_tot[2] = extent[2]\n            if extent[3] > extent_tot[3]:\n                extent_tot[3] = extent[3]\n    grid_srs = osr.SpatialReference()\n    grid_srs.ImportFromEPSG(3035)\nelse:\n    srs_list = []\n    refdict = {}\n    for shp in glob.glob(biotopes + \"[Ss]ingle_*.shp\")  + glob.glob(\n        biotopes + \"[Ll]ist_*.shp\"\n    ):\n        driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        dataSource = driver.Open(shp, 0)  # 0 means read-only. 1 means writeable.\n        if dataSource is None:\n            print(\"Could not open %s\" % (shp))\n        else:\n            inLayer = dataSource.GetLayer()\n            refdict[shp] = inLayer.GetSpatialRef()\n            srs_list.append(inLayer.GetSpatialRef())\n            extent = inLayer.GetExtent()\n            if extent[0] < extent_tot[0]:\n                extent_tot[0] = extent[0]\n            if extent[1] > extent_tot[1]:\n                extent_tot[1] = extent[1]\n            if extent[2] < extent_tot[2]:\n                extent_tot[2] = extent[2]\n            if extent[3] > extent_tot[3]:\n                extent_tot[3] = extent[3]\n    grid_srs = srs_list[0]\n    for my_srs in srs_list:\n        if my_srs.IsSame(grid_srs):\n            print(\"OK\")\n        else:\n            print(\"all data must be in the same coordinate system\")\n            for layer_ref in refdict.items():\n                print(\n                    layer_ref[0]\n                    + \" has coordinate system \"\n                    + layer_ref[1].ExportToPrettyWkt()\n                )\n            sys.exit()\n\nprint(\"Full extent based on input files\")\nprint(extent_tot)\nx_min, x_max, y_min, y_max = extent_tot\n\n\nx_min = ((x_min // grid_size) - 1) * grid_size\ny_min = ((y_min // grid_size) - 1) * grid_size\nx_max = ((x_max // grid_size) + 1) * grid_size\ny_max = ((y_max // grid_size) + 1) * grid_size\n\n\nfor shp in glob.glob(biotopes + \"[Ll]ist_*.shp\"):\n    dataSource = driver.Open(shp, 0)\n    layer = dataSource.GetLayer()\n    values_list = []\n    for feature in layer:\n        newval = feature.GetField(field_name)\n        values_list.append(newval)\n    layer.ResetReading()\n    for fieldval in list(set(values_list)):\n        layer.SetAttributeFilter(\"{0} = '{1}'\".format(field_name, fieldval))\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", fieldval).lower()\n        print(filename)\n        outShapefile = os.path.join(\n            os.path.split(shp)[0], \"single_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        if os.path.exists(outShapefile):\n            outDriver.DeleteDataSource(outShapefile)\n        outDataSource = outDriver.CreateDataSource(outShapefile)\n        out_lyr_name = os.path.splitext(os.path.split(outShapefile)[1])[0]\n        outLayer = outDataSource.CreateLayer(\n            out_lyr_name, grid_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        outLayerDefn = outLayer.GetLayerDefn()\n        for inFeature in layer:\n            outFeature = ogr.Feature(outLayerDefn)\n            geom = inFeature.GetGeometryRef()\n            outFeature.SetGeometry(geom.Clone())\n            outLayer.CreateFeature(outFeature)\n        layer.ResetReading()\n        outDataSource.Destroy()\n\nif LAEA:\n    biotopes_proj = biotopes + \"[Ss]ingle*_LAEA.shp\"\nelse:\n    biotopes_proj = biotopes + \"[Ss]ingle*.shp\"\nfor shp in glob.glob(biotopes_proj):\n    \n    NoData_value = 0\n    norm_name = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", os.path.split(shp)[1])\n    out_name = norm_name[:-4].replace(\"single_\", \"h_\") + \".tif\"\n    raster_fn = os.path.join(os.path.split(shp)[0], out_name)\n    source_ds = ogr.Open(shp)\n    source_layer = source_ds.GetLayer()\n    source_srs = source_layer.GetSpatialRef()\n    x_res = int((x_max - x_min) / grid_size)\n    y_res = int((y_max - y_min) / grid_size)\n    target_ds = gdal.GetDriverByName(\"GTiff\").Create(\n        raster_fn, x_res, y_res, gdal.GDT_Byte\n    )\n    target_ds.SetGeoTransform((x_min, grid_size, 0, y_max, 0, -grid_size))\n    band = target_ds.GetRasterBand(1)\n    band.SetNoDataValue(NoData_value)\n    target_ds.SetProjection(source_srs.ExportToWkt())\n    gdal.RasterizeLayer(\n        target_ds, [1], source_layer, burn_values=[1], options=[\"ALL_TOUCHED=TRUE\"]\n    )\n\nwgs84_globe = pyproj.Proj(proj=\"latlong\", ellps=\"WGS84\")\n\ndef point_buff_geodetic(c1, c2, radius, in_proj, out_proj):\n    _lon, _lat = pyproj.transform(in_proj, wgs84_globe, c1, c2)\n    aeqd = pyproj.Proj(\n        proj=\"aeqd\", ellps=\"WGS84\", datum=\"WGS84\", lat_0=_lat, lon_0=_lon\n    )\n    return sh_transform(\n        partial(pyproj.transform, aeqd, out_proj), Point(0, 0).buffer(radius)\n    )\n\ndef point_buff_geodetic_wgs(c1, c2, radius):\n    aeqd = pyproj.Proj(proj=\"aeqd\", ellps=\"WGS84\", datum=\"WGS84\", lat_0=c2, lon_0=c1)\n    proj4str = \"+proj=aeqd +lat_0=%s +lon_0=%s +x_0=0 +y_0=0\" % (c2, c1)\n    aeqd = pyproj.Proj(proj4str)  # azimuthal equidistant\n    project = partial(pyproj.transform, aeqd, pyproj.Proj(\"EPSG:4326\"), always_xy=True)\n    return transform(project, Point(0, 0).buffer(radius))\n\n\nprint(grid_srs.ExportToWkt())\nhab_proj = pyproj.Proj(grid_srs.ExportToWkt())\nif \".shp\" in occurences:\n    dataSource = driver.Open(occurences, 0)\n    sp_layer = dataSource.GetLayer()\n    field_name_oc = \"scientific\"\n    field_name_radius = \"radius\"\n    sp_srs = sp_layer.GetSpatialRef()\n    sp_proj = pyproj.Proj(sp_srs.ExportToWkt())\n    species_list = []\n    for feature in sp_layer:\n        newval = feature.GetField(field_name_oc)\n        if not newval in species_list:\n            species_list.append(newval)\n    sp_layer.ResetReading()\n    print(\"there are \" + str(len(species_list)) + \" items\")\n\n    for fieldval in species_list:\n        sp_layer.SetAttributeFilter(\"{0} = '{1}'\".format(field_name_oc, fieldval))\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", fieldval).lower()\n        print(filename)\n        outShapefile = os.path.join(\n            os.path.split(occurences)[0], \"spf_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        if os.path.exists(outShapefile):\n            outDriver.DeleteDataSource(outShapefile)\n        outDataSource = outDriver.CreateDataSource(outShapefile)\n        out_lyr_name = os.path.splitext(os.path.split(outShapefile)[1])[0]\n        outLayer = outDataSource.CreateLayer(\n            out_lyr_name, grid_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        outLayerDefn = outLayer.GetLayerDefn()\n        for inFeature in sp_layer:\n            outFeature = ogr.Feature(outLayerDefn)\n            geom = inFeature.GetGeometryRef()\n            uncertainty_radius = inFeature.GetField(field_name_radius)\n            geom_out = point_buff_geodetic(\n                geom.GetX(), geom.GetY(), uncertainty_radius, sp_proj, hab_proj\n            )\n            poly = ogr.CreateGeometryFromWkt(geom_out.wkt)\n            multipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n            multipolygon.AddGeometry(poly)\n            outFeature.SetGeometry(multipolygon)\n            outLayer.CreateFeature(outFeature)\n        sp_layer.ResetReading()\n        outDataSource.Destroy()\nelif \".txt\" in occurences:\n    radius = 50\n    print(\"csv input\")\n    alien_taxa = {}\n    with open(alienTaxa, newline=\"\") as csvfile_at:\n        atl = csv.reader(csvfile_at, delimiter=\"\\t\", quotechar=\"|\")\n        i = 0\n        for row in atl:\n            if i == 0:\n                fld_idx = row.index(\"scientificName\")\n                try:\n                    radius_idx = row.index(\"dispersionRadius\")\n                except:\n                    radius_idx = -1\n                i += 1\n            else:\n                if radius_idx < 0:\n                    alien_taxa[row[fld_idx]] = radius_default\n                else:\n                    alien_taxa[row[fld_idx]] = float(row[radius_idx])\n    print(\"there are \" + str(len(alien_taxa)) + \" items\")\n    df_occs = pandas.read_csv(\n        occurences,\n        delimiter=\"\\t\",\n        usecols=[\n            field_name_oc,\n            \"decimalLatitude\",#-\"NCoord\",\n            \"decimalLongitude\",#-\"ECoord\",\n        ],\n    )\n    sp_out_srs = osr.SpatialReference()\n    sp_out_srs.ImportFromEPSG(4326)\n    for alien_sp in alien_taxa:\n        print(alien_sp + \" \" + str(round(alien_taxa[alien_sp], 0)))\n        dis_radius = alien_taxa[alien_sp]\n        df_temp = df_occs.loc[df_occs[field_name_oc] == alien_sp]\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", alien_sp).lower()\n        outShapefile_csv = os.path.join(\n            os.path.split(occurences)[0], \"sp_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        if os.path.exists(outShapefile_csv):\n            outDriver.DeleteDataSource(outShapefile_csv)\n        outDataSource_csv = outDriver.CreateDataSource(outShapefile_csv)\n        out_lyr_name_csv = os.path.splitext(os.path.split(outShapefile_csv)[1])[0]\n        outLayer_csv = outDataSource_csv.CreateLayer(\n            out_lyr_name_csv, sp_out_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        outLayerDefn_csv = outLayer_csv.GetLayerDefn()\n        j = 0\n        for i, row in df_temp.iterrows():\n            outFeature_csv = ogr.Feature(outLayerDefn_csv)\n            geom_out = point_buff_geodetic_wgs(\n                float(row.decimalLongitude) ,float(row.decimalLatitude),dis_radius\n            )  # float(row.DispersionRadius))\n            poly = ogr.CreateGeometryFromWkt(geom_out.wkt)\n            multipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n            multipolygon.AddGeometry(poly)\n            outFeature_csv.SetGeometry(multipolygon)\n            outLayer_csv.CreateFeature(outFeature_csv)\n            j += 1\n        print(filename + \" has\" + str(j) + \" features\")\n        outDataSource_csv.Destroy()\n        grid_srs.AutoIdentifyEPSG()\n        subprocess.call(\n            [\n                \"ogr2ogr\",\n                \"-t_srs\",\n                \"EPSG:\" + str(grid_srs.GetAuthorityCode(None)),\n                outShapefile_csv[:-4] + \"_loc.shp\",\n                outShapefile_csv,\n            ]\n        )\nelse:\n    print(\"No valid imput for species occurences\")\n\n\n\nfor shp in glob.glob(os.path.join(os.path.split(occurences)[0], \"sp_*loc.shp\")):\n\n    NoData_value = 0\n\n    raster_fn = shp[:-4].replace(\"sp_\", \"s_\") + \".tif\"\n    print(raster_fn + \" raster processing\")\n    source_ds = ogr.Open(shp)\n    source_layer = source_ds.GetLayer()\n    source_srs = source_layer.GetSpatialRef()\n\n    x_res = int((x_max - x_min) / grid_size)\n    y_res = int((y_max - y_min) / grid_size)\n    target_ds = gdal.GetDriverByName(\"GTiff\").Create(\n        raster_fn, x_res, y_res, gdal.GDT_Byte\n    )\n    target_ds.SetGeoTransform((x_min, grid_size, 0, y_max, 0, -grid_size))\n    band = target_ds.GetRasterBand(1)\n    band.SetNoDataValue(NoData_value)\n    target_ds.SetProjection(source_srs.ExportToWkt())\n    gdal.RasterizeLayer(\n        target_ds, [1], source_layer, burn_values=[1], options=[\"ALL_TOUCHED=TRUE\"]\n    )\n\n\n\nfor weight_matrix_csv in [weight_matrix_template]:\n    w = os.path.split(weight_matrix_csv)[1][:-4]\n    print(w)\n    with open(weight_matrix_csv, newline=\"\") as csvfile:\n        w_matrix = csv.reader(csvfile, delimiter=\"\\t\", quotechar=\"|\")\n        i = 0\n        for row in w_matrix:\n            print(f\"{row}\")\n            if i == 0:\n                habitat_names = [\n                    re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", x).lower() for x in row\n                ]\n                i += 1\n            else:\n                sp_name = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", row[0]).lower()\n                sp_file = os.path.join(\n                    os.path.split(occurences)[0], \"s_{}_loc.tif\".format(sp_name)\n                )\n                if os.path.exists(sp_file):\n                    j = 0\n                    k = 1\n                    expression = []\n                    file_list = [sp_file]\n                    for habitat in row:\n                        if j > 0:\n                            if LAEA:\n                                hab_file = os.path.join(\n                                    biotopes, \"h_{}_LAEA.tif\".format(habitat_names[j])\n                                    )\n                            else:\n                                hab_file = os.path.join(\n                                    biotopes, \"h_{}.tif\".format(habitat_names[j])\n                                    )\n                            if os.path.exists(hab_file):\n                                if float(habitat) > 0:\n                                    k += 1\n                                    expression.append(\n                                        \"im1b1*im{0}b1*{1}\".format(k, habitat)\n                                    )\n                                    file_list.append(hab_file)\n                            else:\n                                print(\n                                    \"WARNING: no file for {}\".format(habitat_names[j])\n                                )\n                                expression.append(\"0\") #use zero in case a file is not found to avoid NoData rasters\n                            j += 1\n                        else:\n                            j += 1\n                    if len(file_list) > 0:\n                        if len(expression) == 0:\n                            expression = [\"0\"]\n                        outfile = os.path.join(\n                            outpath,\n                            \"impact_{0}_{1}.tif{2}\".format(\n                                sp_name,\n                                w,\n                                \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\",\n                            ),\n                        )\n                        print(\"+\".join(expression))\n                        subprocess.call(\n                            [\n                                otbbin + \"otbcli_BandMath\",\n                                \"-out\",\n                                outfile,\n                                \"-exp\",\n                                \"+\".join(expression),\n                                \"-il\",\n                            ]\n                            + file_list\n                        )\n                else:\n                    print(\"WARNING: no file for {}\".format(sp_name))\n    if filter_matrix_csv and os.path.exists(filter_matrix_csv):\n        with open(filter_matrix_csv, newline=\"\") as csvfile_f:\n            f_matrix = csv.reader(csvfile_f, delimiter=\"\\t\", quotechar=\"|\")\n            i = 0\n            for row in f_matrix:\n                if i == 0:\n                    sp_names = [re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", x).lower() for x in row]\n                    i += 1\n                    print(\"number of species \" + str(len(sp_names)))\n                else:\n                    j = 0\n                    k = 0\n                    expression = []\n                    sp_file_list = []\n                    for sp in row:\n                        if j > 0:\n                            impact_file = os.path.join(\n                                outpath, \"impact_{0}_{1}.tif\".format(sp_names[j], w)\n                            )\n                            if os.path.exists(impact_file):\n                                if float(sp) > 0:\n                                    k += 1\n                                    expression.append(\"im{0}b1\".format(k))\n                                    sp_file_list.append(impact_file)\n                            else:\n                                print(j)\n                                print(\"WARNING: no file for {}\".format(sp_names[j]))\n                                expression.append(\"0\") # add zero in case of missing file to avoid nodata in further calculations\n                            j += 1\n                        else:\n                            j += 1\n                    if len(sp_file_list) > 0:\n                        outfile = os.path.join(\n                            outpath,\n                            \"cimpal_{0}_{1}.tif{2}\".format(\n                                row[0],\n                                w,\n                                \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\",\n                            ),\n                        )\n                        subprocess.call(\n                            [\n                                otbbin + \"otbcli_BandMath\",\n                                \"-out\",\n                                outfile,\n                                \"-exp\",\n                                \"+\".join(expression),\n                                \"-il\",\n                            ]\n                            + sp_file_list\n                        )\n                    else:\n                        print(\"WARNING: no file for pathway {row[0]} and matrix {w}\")\n    else:\n        k = 1\n        expression = []\n        sp_file_list = []\n        for impact_file in glob.glob(\n            os.path.join(outpath, \"impact_*_{0}.tif\".format(w))\n        ):\n            expression.append(\"im{0}b1\".format(k))\n            sp_file_list.append(impact_file)\n            k += 1\n        if len(sp_file_list) > 0:\n            outfile = os.path.join(\n                outpath,\n                \"cimpal_all_{0}.tif{1}\".format(\n                    w, \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\"\n                ),\n            )\n            subprocess.call(\n                [\n                    otbbin + \"otbcli_BandMath\",\n                    \"-out\",\n                    outfile,\n                    \"-exp\",\n                    \"+\".join(expression),\n                    \"-il\",\n                ]\n                + sp_file_list\n            )\n        else:\n            print(f\"WARNING: No impact files matrix {w}\")\ngrid_srs_out = Path(outpath, \"grid_srs_toWkt.txt\")\nf = open(grid_srs_out, mode=\"w+\")\nf.write(grid_srs.ExportToWkt())\nf.close()",
      "types": {
        "occ_taxa": "str",
        "biotope_shp_path_file": "str",
        "weight_file": "str",
        "pathway_file": "str",
        "out_path": "str",
        "param_grid_size_para": "int"
      },
      "inputs": [
        "biotope_shp_path_file",
        "occ_taxa",
        "pathway_file",
        "weight_file"
      ],
      "outputs": [
        "out_path"
      ],
      "params": [
        "param_grid_size_para"
      ],
      "param_values": {
        "param_grid_size_para": "25"
      },
      "confs": {
        "conf_data_dir": "conf_data_dir = '/tmp/data'"
      },
      "all_inputs": [
        "biotope_shp_path_file",
        "occ_taxa",
        "pathway_file",
        "weight_file"
      ],
      "dependencies": [
        {
          "name": "Path",
          "asname": null,
          "module": "pathlib"
        },
        {
          "name": "Point",
          "asname": null,
          "module": "shapely.geometry"
        },
        {
          "name": "csv",
          "asname": null,
          "module": ""
        },
        {
          "name": "gdal",
          "asname": null,
          "module": "osgeo"
        },
        {
          "name": "glob",
          "asname": null,
          "module": ""
        },
        {
          "name": "ogr",
          "asname": null,
          "module": "osgeo"
        },
        {
          "name": "os",
          "asname": null,
          "module": ""
        },
        {
          "name": "osr",
          "asname": null,
          "module": "osgeo"
        },
        {
          "name": "pandas",
          "asname": null,
          "module": ""
        },
        {
          "name": "partial",
          "asname": null,
          "module": "functools"
        },
        {
          "name": "pyproj",
          "asname": null,
          "module": ""
        },
        {
          "name": "re",
          "asname": null,
          "module": ""
        },
        {
          "name": "subprocess",
          "asname": null,
          "module": ""
        },
        {
          "name": "transform",
          "asname": null,
          "module": "shapely.ops"
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "aee517d": {
            "id": "aee517d",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "cimpal-calculator-gabriel-pelouze-lifewatch-eu",
              "vars": [
                {
                  "name": "biotope_shp_path_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#2d863a"
                },
                {
                  "name": "occ_taxa",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#862d68"
                },
                {
                  "name": "pathway_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#3d862d"
                },
                {
                  "name": "weight_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#9bc587"
                },
                {
                  "name": "out_path",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#6c96e0"
                }
              ],
              "params": [
                "param_grid_size_para"
              ],
              "inputs": [
                "occ_taxa",
                "biotope_shp_path_file",
                "pathway_file",
                "weight_file"
              ],
              "outputs": [
                "out_path"
              ],
              "og_node_id": "aee517d"
            },
            "ports": {
              "biotope_shp_path_file": {
                "properties": {
                  "color": "#2d863a"
                },
                "id": "biotope_shp_path_file",
                "type": "left"
              },
              "occ_taxa": {
                "properties": {
                  "color": "#862d68"
                },
                "id": "occ_taxa",
                "type": "left"
              },
              "pathway_file": {
                "properties": {
                  "color": "#3d862d"
                },
                "id": "pathway_file",
                "type": "left"
              },
              "weight_file": {
                "properties": {
                  "color": "#9bc587"
                },
                "id": "weight_file",
                "type": "left"
              },
              "out_path": {
                "properties": {
                  "color": "#6c96e0"
                },
                "id": "out_path",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "aee517d",
      "container_source": "from pathlib import Path\nfrom shapely.geometry import Point\nimport csv\nfrom osgeo import gdal\nimport glob\nfrom osgeo import ogr\nimport os\nfrom osgeo import osr\nimport pandas\nfrom functools import partial\nimport pyproj\nimport re\nimport subprocess\nfrom shapely.ops import transform\n\nimport argparse\nimport json\narg_parser = argparse.ArgumentParser()\n\narg_parser.add_argument('--id', action='store',\n                        type=str, required=True, dest='id')\n\n\narg_parser.add_argument('--biotope_shp_path_file', action='store',\n                        type=str, required=True, dest='biotope_shp_path_file')\n\narg_parser.add_argument('--occ_taxa', action='store',\n                        type=str, required=True, dest='occ_taxa')\n\narg_parser.add_argument('--pathway_file', action='store',\n                        type=str, required=True, dest='pathway_file')\n\narg_parser.add_argument('--weight_file', action='store',\n                        type=str, required=True, dest='weight_file')\n\narg_parser.add_argument('--param_grid_size_para', action='store',\n                        type=int, required=True, dest='param_grid_size_para')\n\nargs = arg_parser.parse_args()\nprint(args)\n\nid = args.id\n\nbiotope_shp_path_file = args.biotope_shp_path_file.replace('\"', '')\nocc_taxa = args.occ_taxa.replace('\"', '')\npathway_file = args.pathway_file.replace('\"', '')\nweight_file = args.weight_file.replace('\"', '')\n\nparam_grid_size_para = args.param_grid_size_para\n\nconf_data_dir = '/tmp/data'\n\n\nconf_data_dir = '/tmp/data'\n\n\nocc_and_taxa_path = occ_taxa\nbiotope_shp_path = biotope_shp_path_file\nweights_path = weight_file\npathways_path = pathway_file\n\nos.makedirs(f\"{conf_data_dir}/output/Cimpal\")\nout_path = f\"{conf_data_dir}/output/Cimpal\"\n\n\ngbif_dir = Path(occ_and_taxa_path)\nshp_dir = biotope_shp_path\nshp_files = os.listdir(shp_dir)\nimpact_matrix = weights_path\ngrid_size = param_grid_size_para\nnis_pathways_matrix_path_dir = pathways_path\n\n\notbbin = \"/usr/local/otb/bin/\"\noutpath = out_path\n\nshp_file = None\n\nfor file in shp_files:\n    if file.endswith(\".shp\"):\n        shp_file = os.path.join(shp_dir, file)\n        break\n\nif not shp_file:\n    raise FileNotFoundError(\"`.shp` file not found in zip\")\n\n\nbiotopes = str(shp_dir) + '/'\noutpath = out_path + '/'\nweight_matrix_template = weights_path\nfilter_matrix_csv = pathways_path\noccurences = str(Path(gbif_dir, \"occurrence.txt\"))\nalienTaxa = str(Path(gbif_dir, \"alientaxa.txt\"))\n\nprint(\"=================================\")\nprint(f\"biotopes {biotopes}\")\nprint(f\"outpath {outpath}\")\nprint(f\"weight_matrix_template {weight_matrix_template}\")\nprint(f\"filter_matrix_csv {filter_matrix_csv}\")\nprint(f\"occurences {occurences}\")\nprint(f\"alienTaxa {alienTaxa}\")\nprint(\"=================================\")\n\n\nzone_field = 'id_habitat'\nfield_name_oc = \"scientificName\"\nuseEEA = True\nLAEA = True\ngrid_size = int(param_grid_size_para)\nfield_name_radius = \"dispersionRadius\"\nradius_default = 100\nfield_name = \"Habitat\"\n\nextent_tot = [\n    100000000,\n    -100000000,\n    100000000,\n    -100000000,\n]  # initialise extent: xmin, xmax, ymin, ymax\n\nif useEEA:\n    shp_candidates = glob.glob(biotopes + \"[sS]ingle_*.shp\") + glob.glob(\n        biotopes + \"[Ll]ist_*.shp\"\n    )\n    print(len(shp_candidates))\n    for shp in [x for x in shp_candidates if not \"LAEA\" in x]:\n        print(\"reprojecting \" + shp)\n        outshp = shp[:-4] + \"_LAEA.shp\"\n        subprocess.call([\"ogr2ogr\", \"-t_srs\", \"EPSG:3035\", outshp, shp])\n        driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        # 0 means read-only. 1 means writeable.\n        dataSource = driver.Open(outshp, 0)\n\n        if dataSource is None:\n            print(\"Could not open %s\" % (shp))\n        else:\n            inLayer = dataSource.GetLayer()\n            extent = inLayer.GetExtent()\n            if extent[0] < extent_tot[0]:\n                extent_tot[0] = extent[0]\n            if extent[1] > extent_tot[1]:\n                extent_tot[1] = extent[1]\n            if extent[2] < extent_tot[2]:\n                extent_tot[2] = extent[2]\n            if extent[3] > extent_tot[3]:\n                extent_tot[3] = extent[3]\n    grid_srs = osr.SpatialReference()\n    grid_srs.ImportFromEPSG(3035)\nelse:\n    srs_list = []\n    refdict = {}\n    for shp in glob.glob(biotopes + \"[Ss]ingle_*.shp\") + glob.glob(\n        biotopes + \"[Ll]ist_*.shp\"\n    ):\n        driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        # 0 means read-only. 1 means writeable.\n        dataSource = driver.Open(shp, 0)\n        if dataSource is None:\n            print(\"Could not open %s\" % (shp))\n        else:\n            inLayer = dataSource.GetLayer()\n            refdict[shp] = inLayer.GetSpatialRef()\n            srs_list.append(inLayer.GetSpatialRef())\n            extent = inLayer.GetExtent()\n            if extent[0] < extent_tot[0]:\n                extent_tot[0] = extent[0]\n            if extent[1] > extent_tot[1]:\n                extent_tot[1] = extent[1]\n            if extent[2] < extent_tot[2]:\n                extent_tot[2] = extent[2]\n            if extent[3] > extent_tot[3]:\n                extent_tot[3] = extent[3]\n    grid_srs = srs_list[0]\n    for my_srs in srs_list:\n        if my_srs.IsSame(grid_srs):\n            print(\"OK\")\n        else:\n            print(\"all data must be in the same coordinate system\")\n            for layer_ref in refdict.items():\n                print(\n                    layer_ref[0]\n                    + \" has coordinate system \"\n                    + layer_ref[1].ExportToPrettyWkt()\n                )\n            sys.exit()\n\nprint(\"Full extent based on input files\")\nprint(extent_tot)\nx_min, x_max, y_min, y_max = extent_tot\n\n\nx_min = ((x_min // grid_size) - 1) * grid_size\ny_min = ((y_min // grid_size) - 1) * grid_size\nx_max = ((x_max // grid_size) + 1) * grid_size\ny_max = ((y_max // grid_size) + 1) * grid_size\n\n\nfor shp in glob.glob(biotopes + \"[Ll]ist_*.shp\"):\n    dataSource = driver.Open(shp, 0)\n    layer = dataSource.GetLayer()\n    values_list = []\n    for feature in layer:\n        newval = feature.GetField(field_name)\n        values_list.append(newval)\n    layer.ResetReading()\n    for fieldval in list(set(values_list)):\n        layer.SetAttributeFilter(\"{0} = '{1}'\".format(field_name, fieldval))\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", fieldval).lower()\n        print(filename)\n        outShapefile = os.path.join(\n            os.path.split(shp)[0], \"single_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        if os.path.exists(outShapefile):\n            outDriver.DeleteDataSource(outShapefile)\n        outDataSource = outDriver.CreateDataSource(outShapefile)\n        out_lyr_name = os.path.splitext(os.path.split(outShapefile)[1])[0]\n        outLayer = outDataSource.CreateLayer(\n            out_lyr_name, grid_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        outLayerDefn = outLayer.GetLayerDefn()\n        for inFeature in layer:\n            outFeature = ogr.Feature(outLayerDefn)\n            geom = inFeature.GetGeometryRef()\n            outFeature.SetGeometry(geom.Clone())\n            outLayer.CreateFeature(outFeature)\n        layer.ResetReading()\n        outDataSource.Destroy()\n\nif LAEA:\n    biotopes_proj = biotopes + \"[Ss]ingle*_LAEA.shp\"\nelse:\n    biotopes_proj = biotopes + \"[Ss]ingle*.shp\"\nfor shp in glob.glob(biotopes_proj):\n\n    NoData_value = 0\n    norm_name = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", os.path.split(shp)[1])\n    out_name = norm_name[:-4].replace(\"single_\", \"h_\") + \".tif\"\n    raster_fn = os.path.join(os.path.split(shp)[0], out_name)\n    source_ds = ogr.Open(shp)\n    source_layer = source_ds.GetLayer()\n    source_srs = source_layer.GetSpatialRef()\n    x_res = int((x_max - x_min) / grid_size)\n    y_res = int((y_max - y_min) / grid_size)\n    target_ds = gdal.GetDriverByName(\"GTiff\").Create(\n        raster_fn, x_res, y_res, gdal.GDT_Byte\n    )\n    target_ds.SetGeoTransform((x_min, grid_size, 0, y_max, 0, -grid_size))\n    band = target_ds.GetRasterBand(1)\n    band.SetNoDataValue(NoData_value)\n    target_ds.SetProjection(source_srs.ExportToWkt())\n    gdal.RasterizeLayer(\n        target_ds, [1], source_layer, burn_values=[1], options=[\"ALL_TOUCHED=TRUE\"]\n    )\n\nwgs84_globe = pyproj.Proj(proj=\"latlong\", ellps=\"WGS84\")\n\n\ndef point_buff_geodetic(c1, c2, radius, in_proj, out_proj):\n    _lon, _lat = pyproj.transform(in_proj, wgs84_globe, c1, c2)\n    aeqd = pyproj.Proj(\n        proj=\"aeqd\", ellps=\"WGS84\", datum=\"WGS84\", lat_0=_lat, lon_0=_lon\n    )\n    return sh_transform(\n        partial(pyproj.transform, aeqd, out_proj), Point(0, 0).buffer(radius)\n    )\n\n\ndef point_buff_geodetic_wgs(c1, c2, radius):\n    aeqd = pyproj.Proj(proj=\"aeqd\", ellps=\"WGS84\",\n                       datum=\"WGS84\", lat_0=c2, lon_0=c1)\n    proj4str = \"+proj=aeqd +lat_0=%s +lon_0=%s +x_0=0 +y_0=0\" % (c2, c1)\n    aeqd = pyproj.Proj(proj4str)  # azimuthal equidistant\n    project = partial(pyproj.transform, aeqd,\n                      pyproj.Proj(\"EPSG:4326\"), always_xy=True)\n    return transform(project, Point(0, 0).buffer(radius))\n\n\nprint(grid_srs.ExportToWkt())\nhab_proj = pyproj.Proj(grid_srs.ExportToWkt())\nif \".shp\" in occurences:\n    dataSource = driver.Open(occurences, 0)\n    sp_layer = dataSource.GetLayer()\n    field_name_oc = \"scientific\"\n    field_name_radius = \"radius\"\n    sp_srs = sp_layer.GetSpatialRef()\n    sp_proj = pyproj.Proj(sp_srs.ExportToWkt())\n    species_list = []\n    for feature in sp_layer:\n        newval = feature.GetField(field_name_oc)\n        if not newval in species_list:\n            species_list.append(newval)\n    sp_layer.ResetReading()\n    print(\"there are \" + str(len(species_list)) + \" items\")\n\n    for fieldval in species_list:\n        sp_layer.SetAttributeFilter(\n            \"{0} = '{1}'\".format(field_name_oc, fieldval))\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", fieldval).lower()\n        print(filename)\n        outShapefile = os.path.join(\n            os.path.split(occurences)[0], \"spf_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        if os.path.exists(outShapefile):\n            outDriver.DeleteDataSource(outShapefile)\n        outDataSource = outDriver.CreateDataSource(outShapefile)\n        out_lyr_name = os.path.splitext(os.path.split(outShapefile)[1])[0]\n        outLayer = outDataSource.CreateLayer(\n            out_lyr_name, grid_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        outLayerDefn = outLayer.GetLayerDefn()\n        for inFeature in sp_layer:\n            outFeature = ogr.Feature(outLayerDefn)\n            geom = inFeature.GetGeometryRef()\n            uncertainty_radius = inFeature.GetField(field_name_radius)\n            geom_out = point_buff_geodetic(\n                geom.GetX(), geom.GetY(), uncertainty_radius, sp_proj, hab_proj\n            )\n            poly = ogr.CreateGeometryFromWkt(geom_out.wkt)\n            multipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n            multipolygon.AddGeometry(poly)\n            outFeature.SetGeometry(multipolygon)\n            outLayer.CreateFeature(outFeature)\n        sp_layer.ResetReading()\n        outDataSource.Destroy()\nelif \".txt\" in occurences:\n    radius = 50\n    print(\"csv input\")\n    alien_taxa = {}\n    with open(alienTaxa, newline=\"\") as csvfile_at:\n        atl = csv.reader(csvfile_at, delimiter=\"\\t\", quotechar=\"|\")\n        i = 0\n        for row in atl:\n            if i == 0:\n                fld_idx = row.index(\"scientificName\")\n                try:\n                    radius_idx = row.index(\"dispersionRadius\")\n                except:\n                    radius_idx = -1\n                i += 1\n            else:\n                if radius_idx < 0:\n                    alien_taxa[row[fld_idx]] = radius_default\n                else:\n                    alien_taxa[row[fld_idx]] = float(row[radius_idx])\n    print(\"there are \" + str(len(alien_taxa)) + \" items\")\n    df_occs = pandas.read_csv(\n        occurences,\n        delimiter=\"\\t\",\n        usecols=[\n            field_name_oc,\n            \"decimalLatitude\",  # -\"NCoord\",\n            \"decimalLongitude\",  # -\"ECoord\",\n        ],\n    )\n    sp_out_srs = osr.SpatialReference()\n    sp_out_srs.ImportFromEPSG(4326)\n    for alien_sp in alien_taxa:\n        print(alien_sp + \" \" + str(round(alien_taxa[alien_sp], 0)))\n        dis_radius = alien_taxa[alien_sp]\n        df_temp = df_occs.loc[df_occs[field_name_oc] == alien_sp]\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", alien_sp).lower()\n        outShapefile_csv = os.path.join(\n            os.path.split(occurences)[0], \"sp_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        if os.path.exists(outShapefile_csv):\n            outDriver.DeleteDataSource(outShapefile_csv)\n        outDataSource_csv = outDriver.CreateDataSource(outShapefile_csv)\n        out_lyr_name_csv = os.path.splitext(\n            os.path.split(outShapefile_csv)[1])[0]\n        outLayer_csv = outDataSource_csv.CreateLayer(\n            out_lyr_name_csv, sp_out_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        outLayerDefn_csv = outLayer_csv.GetLayerDefn()\n        j = 0\n        for i, row in df_temp.iterrows():\n            outFeature_csv = ogr.Feature(outLayerDefn_csv)\n            geom_out = point_buff_geodetic_wgs(\n                float(row.decimalLongitude), float(\n                    row.decimalLatitude), dis_radius\n            )  # float(row.DispersionRadius))\n            poly = ogr.CreateGeometryFromWkt(geom_out.wkt)\n            multipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n            multipolygon.AddGeometry(poly)\n            outFeature_csv.SetGeometry(multipolygon)\n            outLayer_csv.CreateFeature(outFeature_csv)\n            j += 1\n        print(filename + \" has\" + str(j) + \" features\")\n        outDataSource_csv.Destroy()\n        grid_srs.AutoIdentifyEPSG()\n        subprocess.call(\n            [\n                \"ogr2ogr\",\n                \"-t_srs\",\n                \"EPSG:\" + str(grid_srs.GetAuthorityCode(None)),\n                outShapefile_csv[:-4] + \"_loc.shp\",\n                outShapefile_csv,\n            ]\n        )\nelse:\n    print(\"No valid imput for species occurences\")\n\n\nfor shp in glob.glob(os.path.join(os.path.split(occurences)[0], \"sp_*loc.shp\")):\n\n    NoData_value = 0\n\n    raster_fn = shp[:-4].replace(\"sp_\", \"s_\") + \".tif\"\n    print(raster_fn + \" raster processing\")\n    source_ds = ogr.Open(shp)\n    source_layer = source_ds.GetLayer()\n    source_srs = source_layer.GetSpatialRef()\n\n    x_res = int((x_max - x_min) / grid_size)\n    y_res = int((y_max - y_min) / grid_size)\n    target_ds = gdal.GetDriverByName(\"GTiff\").Create(\n        raster_fn, x_res, y_res, gdal.GDT_Byte\n    )\n    target_ds.SetGeoTransform((x_min, grid_size, 0, y_max, 0, -grid_size))\n    band = target_ds.GetRasterBand(1)\n    band.SetNoDataValue(NoData_value)\n    target_ds.SetProjection(source_srs.ExportToWkt())\n    gdal.RasterizeLayer(\n        target_ds, [1], source_layer, burn_values=[1], options=[\"ALL_TOUCHED=TRUE\"]\n    )\n\n\nfor weight_matrix_csv in [weight_matrix_template]:\n    w = os.path.split(weight_matrix_csv)[1][:-4]\n    print(w)\n    with open(weight_matrix_csv, newline=\"\") as csvfile:\n        w_matrix = csv.reader(csvfile, delimiter=\"\\t\", quotechar=\"|\")\n        i = 0\n        for row in w_matrix:\n            print(f\"{row}\")\n            if i == 0:\n                habitat_names = [\n                    re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", x).lower() for x in row\n                ]\n                i += 1\n            else:\n                sp_name = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", row[0]).lower()\n                sp_file = os.path.join(\n                    os.path.split(occurences)[\n                        0], \"s_{}_loc.tif\".format(sp_name)\n                )\n                if os.path.exists(sp_file):\n                    j = 0\n                    k = 1\n                    expression = []\n                    file_list = [sp_file]\n                    for habitat in row:\n                        if j > 0:\n                            if LAEA:\n                                hab_file = os.path.join(\n                                    biotopes, \"h_{}_LAEA.tif\".format(\n                                        habitat_names[j])\n                                )\n                            else:\n                                hab_file = os.path.join(\n                                    biotopes, \"h_{}.tif\".format(\n                                        habitat_names[j])\n                                )\n                            if os.path.exists(hab_file):\n                                if float(habitat) > 0:\n                                    k += 1\n                                    expression.append(\n                                        \"im1b1*im{0}b1*{1}\".format(k, habitat)\n                                    )\n                                    file_list.append(hab_file)\n                            else:\n                                print(\n                                    \"WARNING: no file for {}\".format(\n                                        habitat_names[j])\n                                )\n                                # use zero in case a file is not found to avoid NoData rasters\n                                expression.append(\"0\")\n                            j += 1\n                        else:\n                            j += 1\n                    if len(file_list) > 0:\n                        if len(expression) == 0:\n                            expression = [\"0\"]\n                        outfile = os.path.join(\n                            outpath,\n                            \"impact_{0}_{1}.tif{2}\".format(\n                                sp_name,\n                                w,\n                                \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\",\n                            ),\n                        )\n                        print(\"+\".join(expression))\n                        subprocess.call(\n                            [\n                                otbbin + \"otbcli_BandMath\",\n                                \"-out\",\n                                outfile,\n                                \"-exp\",\n                                \"+\".join(expression),\n                                \"-il\",\n                            ]\n                            + file_list\n                        )\n                else:\n                    print(\"WARNING: no file for {}\".format(sp_name))\n    if filter_matrix_csv and os.path.exists(filter_matrix_csv):\n        with open(filter_matrix_csv, newline=\"\") as csvfile_f:\n            f_matrix = csv.reader(csvfile_f, delimiter=\"\\t\", quotechar=\"|\")\n            i = 0\n            for row in f_matrix:\n                if i == 0:\n                    sp_names = [\n                        re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", x).lower() for x in row]\n                    i += 1\n                    print(\"number of species \" + str(len(sp_names)))\n                else:\n                    j = 0\n                    k = 0\n                    expression = []\n                    sp_file_list = []\n                    for sp in row:\n                        if j > 0:\n                            impact_file = os.path.join(\n                                outpath, \"impact_{0}_{1}.tif\".format(\n                                    sp_names[j], w)\n                            )\n                            if os.path.exists(impact_file):\n                                if float(sp) > 0:\n                                    k += 1\n                                    expression.append(\"im{0}b1\".format(k))\n                                    sp_file_list.append(impact_file)\n                            else:\n                                print(j)\n                                print(\"WARNING: no file for {}\".format(\n                                    sp_names[j]))\n                                # add zero in case of missing file to avoid nodata in further calculations\n                                expression.append(\"0\")\n                            j += 1\n                        else:\n                            j += 1\n                    if len(sp_file_list) > 0:\n                        outfile = os.path.join(\n                            outpath,\n                            \"cimpal_{0}_{1}.tif{2}\".format(\n                                row[0],\n                                w,\n                                \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\",\n                            ),\n                        )\n                        subprocess.call(\n                            [\n                                otbbin + \"otbcli_BandMath\",\n                                \"-out\",\n                                outfile,\n                                \"-exp\",\n                                \"+\".join(expression),\n                                \"-il\",\n                            ]\n                            + sp_file_list\n                        )\n                    else:\n                        print(\n                            \"WARNING: no file for pathway {row[0]} and matrix {w}\")\n    else:\n        k = 1\n        expression = []\n        sp_file_list = []\n        for impact_file in glob.glob(\n            os.path.join(outpath, \"impact_*_{0}.tif\".format(w))\n        ):\n            expression.append(\"im{0}b1\".format(k))\n            sp_file_list.append(impact_file)\n            k += 1\n        if len(sp_file_list) > 0:\n            outfile = os.path.join(\n                outpath,\n                \"cimpal_all_{0}.tif{1}\".format(\n                    w, \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\"\n                ),\n            )\n            subprocess.call(\n                [\n                    otbbin + \"otbcli_BandMath\",\n                    \"-out\",\n                    outfile,\n                    \"-exp\",\n                    \"+\".join(expression),\n                    \"-il\",\n                ]\n                + sp_file_list\n            )\n        else:\n            print(f\"WARNING: No impact files matrix {w}\")\ngrid_srs_out = Path(outpath, \"grid_srs_toWkt.txt\")\nf = open(grid_srs_out, mode=\"w+\")\nf.write(grid_srs.ExportToWkt())\nf.close()\n\nfile_out_path = open(\"/tmp/out_path_\" + id + \".json\", \"w\")\nfile_out_path.write(json.dumps(out_path))\nfile_out_path.close()\n",
      "kernel": "ipython",
      "notebook_dict": {
        "metadata": {
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "toc-autonumbering": true,
          "kernelspec": {
            "name": "python3",
            "display_name": "python3",
            "language": "python3"
          },
          "language_info": {
            "name": "python",
            "version": "3.10.14",
            "mimetype": "text/x-python",
            "codemirror_mode": {
              "name": "ipython",
              "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# cimpal-calculator\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - occ_taxa: String\n#    - biotope_shp_path_file: String\n#    - weight_file: String\n#    - pathway_file: String\n#   outputs:\n#    - out_path: String\n# ...\n\nimport os\n\n# inputs\nocc_and_taxa_path = occ_taxa\nbiotope_shp_path = biotope_shp_path_file\nweights_path = weight_file\npathways_path = pathway_file\n\n# outputs\nos.makedirs(f\"{conf_data_dir}/output/Cimpal\")\nout_path = f\"{conf_data_dir}/output/Cimpal\"\n\n\n\nimport glob, subprocess, pandas\nimport os, re, csv\n\nfrom osgeo import ogr, osr\n\nfrom osgeo import gdal\n\nimport pyproj\nfrom shapely.geometry import MultiPolygon, Polygon, Point\nfrom shapely.ops import transform\nfrom functools import partial\nfrom pathlib import Path\n\nimport argparse\n\n# parser = argparse.ArgumentParser(description=\"Biotope Cimpal Calculator\")\n\n# parser.add_argument(\n#     \"-ot\",\n#     \"--occ_and_taxa\",\n#     type=str,\n#     help=\"Occurrences And Alien Taxonomy Dir\",\n#     required=True,\n# )\n# parser.add_argument(\n#     \"-bshp\", \"--biotope_shp\", type=str, help=\"Biotope's Shp Dir\", required=True\n# )\n# parser.add_argument(\n#     \"-p\", \"--pathways\", type=str, help=\"Pathways csv file\", required=False\n# )\n# parser.add_argument(\"-w\", \"--weights\", type=str, help=\"Weights csv file\", required=True)\n# parser.add_argument(\n#     \"-eea\", \"--useEEA\", type=bool, help=\"Use EEA projection\", required=True\n# )\n# parser.add_argument(\"-grid\", \"--grid_size\", type=int, help=\"Grid Size\", required=True)\n# parser.add_argument(\"-o\", \"--out\", type=str, help=\"outpath\", required=True)\n\n# args = parser.parse_args()\ngbif_dir = Path(occ_and_taxa_path)\nshp_dir = biotope_shp_path\nshp_files = os.listdir(shp_dir)\nimpact_matrix = weights_path\ngrid_size = param_grid_size_para\nnis_pathways_matrix_path_dir = pathways_path\n\n# occurences = \"/export/projects/LIFEWATCH/cimpal/metz/occur_RiaAvei_Pinheiro2019_LWformat_2/occur_RiaAvei_Pinheiro2019_LWformat_2.csv\"\n# alien_taxa_csv = (\n#     \"/export/projects/LIFEWATCH/cimpal/metz/Alien_taxa_List/\" + \"Alien_taxa_List.csv\"\n# )\n\n# set the paths to the apps\notbbin = \"/usr/local/otb/bin/\"\noutpath = out_path\n\nshp_file = None\n\nfor file in shp_files:\n    if file.endswith(\".shp\"):\n        shp_file = os.path.join(shp_dir, file)\n        break\n\nif not shp_file:\n    raise FileNotFoundError(\"`.shp` file not found in zip\")\n\n# get input file names from orchestrator\n\nbiotopes = str(shp_dir) + '/'\noutpath = out_path + '/'\nweight_matrix_template = weights_path\nfilter_matrix_csv = pathways_path\noccurences = str(Path(gbif_dir, \"occurrence.txt\"))\nalienTaxa = str(Path(gbif_dir, \"alientaxa.txt\"))\n\nprint(\"=================================\")\nprint(f\"biotopes {biotopes}\")\nprint(f\"outpath {outpath}\")\nprint(f\"weight_matrix_template {weight_matrix_template}\")\nprint(f\"filter_matrix_csv {filter_matrix_csv}\")\nprint(f\"occurences {occurences}\")\nprint(f\"alienTaxa {alienTaxa}\")\nprint(\"=================================\")\n\n\n\n# # predefined variables\nzone_field = 'id_habitat'\nfield_name_oc = \"scientificName\"\nuseEEA = True\nLAEA=True\ngrid_size = int(param_grid_size_para)\nfield_name_radius = \"dispersionRadius\"\nradius_default = 100\nfield_name = \"Habitat\"\n\n## A. Convert all data about habitat into raster layers on a single grid\n## A.1 Check that all data are in the same coordinate system and compute the maximum extent\n##\nextent_tot = [\n    100000000,\n    -100000000,\n    100000000,\n    -100000000,\n]  # initialise extent: xmin, xmax, ymin, ymax\n\nif useEEA:\n    shp_candidates = glob.glob(biotopes + \"[sS]ingle_*.shp\") + glob.glob(\n        biotopes + \"[Ll]ist_*.shp\"\n    )\n    print(len(shp_candidates))\n    for shp in [x for x in shp_candidates if not \"LAEA\" in x]:\n        # reproject the dataset\n        print(\"reprojecting \" + shp)\n        outshp = shp[:-4] + \"_LAEA.shp\"\n        subprocess.call([\"ogr2ogr\", \"-t_srs\", \"EPSG:3035\", outshp, shp])\n        driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        dataSource = driver.Open(outshp, 0)  # 0 means read-only. 1 means writeable.\n\n        # Check to see if shapefile is found.\n        if dataSource is None:\n            print(\"Could not open %s\" % (shp))\n        else:\n            inLayer = dataSource.GetLayer()\n            extent = inLayer.GetExtent()\n            if extent[0] < extent_tot[0]:\n                extent_tot[0] = extent[0]\n            if extent[1] > extent_tot[1]:\n                extent_tot[1] = extent[1]\n            if extent[2] < extent_tot[2]:\n                extent_tot[2] = extent[2]\n            if extent[3] > extent_tot[3]:\n                extent_tot[3] = extent[3]\n    grid_srs = osr.SpatialReference()\n    grid_srs.ImportFromEPSG(3035)\nelse:\n    srs_list = []\n    refdict = {}\n    for shp in glob.glob(biotopes + \"[Ss]ingle_*.shp\")  + glob.glob(\n        biotopes + \"[Ll]ist_*.shp\"\n    ):\n        driver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        dataSource = driver.Open(shp, 0)  # 0 means read-only. 1 means writeable.\n        # Check to see if shapefile is found.\n        if dataSource is None:\n            print(\"Could not open %s\" % (shp))\n        else:\n            inLayer = dataSource.GetLayer()\n            refdict[shp] = inLayer.GetSpatialRef()\n            srs_list.append(inLayer.GetSpatialRef())\n            extent = inLayer.GetExtent()\n            if extent[0] < extent_tot[0]:\n                extent_tot[0] = extent[0]\n            if extent[1] > extent_tot[1]:\n                extent_tot[1] = extent[1]\n            if extent[2] < extent_tot[2]:\n                extent_tot[2] = extent[2]\n            if extent[3] > extent_tot[3]:\n                extent_tot[3] = extent[3]\n    grid_srs = srs_list[0]\n    for my_srs in srs_list:\n        if my_srs.IsSame(grid_srs):\n            print(\"OK\")\n        else:\n            print(\"all data must be in the same coordinate system\")\n            for layer_ref in refdict.items():\n                print(\n                    layer_ref[0]\n                    + \" has coordinate system \"\n                    + layer_ref[1].ExportToPrettyWkt()\n                )\n            sys.exit()\n\nprint(\"Full extent based on input files\")\nprint(extent_tot)\nx_min, x_max, y_min, y_max = extent_tot\n\n\nx_min = ((x_min // grid_size) - 1) * grid_size\ny_min = ((y_min // grid_size) - 1) * grid_size\nx_max = ((x_max // grid_size) + 1) * grid_size\ny_max = ((y_max // grid_size) + 1) * grid_size\n\n\nfor shp in glob.glob(biotopes + \"[Ll]ist_*.shp\"):\n    dataSource = driver.Open(shp, 0)\n    layer = dataSource.GetLayer()\n    values_list = []\n    for feature in layer:\n        newval = feature.GetField(field_name)\n        values_list.append(newval)\n    layer.ResetReading()\n    for fieldval in list(set(values_list)):\n        layer.SetAttributeFilter(\"{0} = '{1}'\".format(field_name, fieldval))\n        # Create the output LayerS\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", fieldval).lower()\n        print(filename)\n        outShapefile = os.path.join(\n            os.path.split(shp)[0], \"single_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        # Remove output shapefile if it already exists\n        if os.path.exists(outShapefile):\n            outDriver.DeleteDataSource(outShapefile)\n        # Create the output shapefile\n        outDataSource = outDriver.CreateDataSource(outShapefile)\n        out_lyr_name = os.path.splitext(os.path.split(outShapefile)[1])[0]\n        outLayer = outDataSource.CreateLayer(\n            out_lyr_name, grid_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        # Get the output Layer's Feature Definition\n        outLayerDefn = outLayer.GetLayerDefn()\n        # Add features to the ouput Layer\n        for inFeature in layer:\n            # Create output Feature\n            outFeature = ogr.Feature(outLayerDefn)\n            # Set geometry as centroid\n            geom = inFeature.GetGeometryRef()\n            outFeature.SetGeometry(geom.Clone())\n            # Add new feature to output Layer\n            outLayer.CreateFeature(outFeature)\n        # Close DataSources\n        layer.ResetReading()\n        outDataSource.Destroy()\n\nif LAEA:\n    biotopes_proj = biotopes + \"[Ss]ingle*_LAEA.shp\"\nelse:\n    biotopes_proj = biotopes + \"[Ss]ingle*.shp\"\nfor shp in glob.glob(biotopes_proj):\n    \n    # Define grid_size and NoData value of new raster\n    NoData_value = 0\n    # Filename of the raster Tiff that will be created\n    norm_name = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", os.path.split(shp)[1])\n    out_name = norm_name[:-4].replace(\"single_\", \"h_\") + \".tif\"\n    raster_fn = os.path.join(os.path.split(shp)[0], out_name)\n    # Open the data source and read in the extent\n    source_ds = ogr.Open(shp)\n    source_layer = source_ds.GetLayer()\n    source_srs = source_layer.GetSpatialRef()\n    # Create the destination data source\n    x_res = int((x_max - x_min) / grid_size)\n    y_res = int((y_max - y_min) / grid_size)\n    target_ds = gdal.GetDriverByName(\"GTiff\").Create(\n        raster_fn, x_res, y_res, gdal.GDT_Byte\n    )\n    target_ds.SetGeoTransform((x_min, grid_size, 0, y_max, 0, -grid_size))\n    band = target_ds.GetRasterBand(1)\n    band.SetNoDataValue(NoData_value)\n    target_ds.SetProjection(source_srs.ExportToWkt())\n    # Rasterize\n    gdal.RasterizeLayer(\n        target_ds, [1], source_layer, burn_values=[1], options=[\"ALL_TOUCHED=TRUE\"]\n    )\n\n##\n#### B create raster for each species based on an uncertainty radius\n##\nwgs84_globe = pyproj.Proj(proj=\"latlong\", ellps=\"WGS84\")\n\n# function for a geodetic buffer around a point\ndef point_buff_geodetic(c1, c2, radius, in_proj, out_proj):\n    # get the equidistant projection centered on the point\n    _lon, _lat = pyproj.transform(in_proj, wgs84_globe, c1, c2)\n    aeqd = pyproj.Proj(\n        proj=\"aeqd\", ellps=\"WGS84\", datum=\"WGS84\", lat_0=_lat, lon_0=_lon\n    )\n    # print(aeqd)\n    # buffer in azimuthal equidistant projection and project it to its initial srs\n    return sh_transform(\n        partial(pyproj.transform, aeqd, out_proj), Point(0, 0).buffer(radius)\n    )\n\ndef point_buff_geodetic_wgs(c1, c2, radius):\n    # get the equidistant projection centered on the point\n    aeqd = pyproj.Proj(proj=\"aeqd\", ellps=\"WGS84\", datum=\"WGS84\", lat_0=c2, lon_0=c1)\n    # print(\"internal longitude = \"  + str(c1))\n    # print(aeqd)\n    # buffer in azimuthal equidistant projection and project it to its initial srs\n    proj4str = \"+proj=aeqd +lat_0=%s +lon_0=%s +x_0=0 +y_0=0\" % (c2, c1)\n    aeqd = pyproj.Proj(proj4str)  # azimuthal equidistant\n    project = partial(pyproj.transform, aeqd, pyproj.Proj(\"EPSG:4326\"), always_xy=True)\n    return transform(project, Point(0, 0).buffer(radius))\n\n\n###B.1 get the list of all species\nprint(grid_srs.ExportToWkt())\nhab_proj = pyproj.Proj(grid_srs.ExportToWkt())\nif \".shp\" in occurences:\n    dataSource = driver.Open(occurences, 0)\n    sp_layer = dataSource.GetLayer()\n    field_name_oc = \"scientific\"\n    field_name_radius = \"radius\"\n    sp_srs = sp_layer.GetSpatialRef()\n    sp_proj = pyproj.Proj(sp_srs.ExportToWkt())\n    species_list = []\n    for feature in sp_layer:\n        newval = feature.GetField(field_name_oc)\n        if not newval in species_list:\n            species_list.append(newval)\n    sp_layer.ResetReading()\n    print(\"there are \" + str(len(species_list)) + \" items\")\n\n    for fieldval in species_list:\n        sp_layer.SetAttributeFilter(\"{0} = '{1}'\".format(field_name_oc, fieldval))\n        # Create the output LayerS\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", fieldval).lower()\n        print(filename)\n        outShapefile = os.path.join(\n            os.path.split(occurences)[0], \"spf_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        # Remove output shapefile if it already exists\n        if os.path.exists(outShapefile):\n            outDriver.DeleteDataSource(outShapefile)\n        # Create the output shapefile\n        outDataSource = outDriver.CreateDataSource(outShapefile)\n        out_lyr_name = os.path.splitext(os.path.split(outShapefile)[1])[0]\n        outLayer = outDataSource.CreateLayer(\n            out_lyr_name, grid_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        # Get the output Layer's Feature Definition\n        outLayerDefn = outLayer.GetLayerDefn()\n        # print(outLayerDefn)\n        # Add features to the ouput Layer\n        for inFeature in sp_layer:\n            # Create output Feature\n            outFeature = ogr.Feature(outLayerDefn)\n            # Set geometry as centroid\n            geom = inFeature.GetGeometryRef()\n            uncertainty_radius = inFeature.GetField(field_name_radius)\n            geom_out = point_buff_geodetic(\n                geom.GetX(), geom.GetY(), uncertainty_radius, sp_proj, hab_proj\n            )\n            poly = ogr.CreateGeometryFromWkt(geom_out.wkt)\n            # print(poly)\n            multipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n            multipolygon.AddGeometry(poly)\n            outFeature.SetGeometry(multipolygon)\n            # Add new feature to output Layer\n            outLayer.CreateFeature(outFeature)\n            # inFeature.Destroy()\n        # Close DataSources\n        sp_layer.ResetReading()\n        outDataSource.Destroy()\nelif \".txt\" in occurences:\n    radius = 50\n    print(\"csv input\")\n    # get a list of alien taxa for filtering\n    alien_taxa = {}\n    with open(alienTaxa, newline=\"\") as csvfile_at:\n        atl = csv.reader(csvfile_at, delimiter=\"\\t\", quotechar=\"|\")\n        i = 0\n        for row in atl:\n            if i == 0:\n                fld_idx = row.index(\"scientificName\")\n                try:\n                    radius_idx = row.index(\"dispersionRadius\")\n                except:\n                    radius_idx = -1\n                i += 1\n            else:\n                if radius_idx < 0:\n                    alien_taxa[row[fld_idx]] = radius_default\n                else:\n                    alien_taxa[row[fld_idx]] = float(row[radius_idx])\n    print(\"there are \" + str(len(alien_taxa)) + \" items\")\n    df_occs = pandas.read_csv(\n        occurences,\n        delimiter=\"\\t\",\n        usecols=[\n            field_name_oc,\n            \"decimalLatitude\",#-\"NCoord\",\n            \"decimalLongitude\",#-\"ECoord\",\n        ],\n    )\n    sp_out_srs = osr.SpatialReference()\n    sp_out_srs.ImportFromEPSG(4326)\n    for alien_sp in alien_taxa:\n        # get the info from the dict\n        print(alien_sp + \" \" + str(round(alien_taxa[alien_sp], 0)))\n        dis_radius = alien_taxa[alien_sp]\n        df_temp = df_occs.loc[df_occs[field_name_oc] == alien_sp]\n        filename = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", alien_sp).lower()\n        outShapefile_csv = os.path.join(\n            os.path.split(occurences)[0], \"sp_{}.shp\".format(filename)\n        )\n        outDriver = ogr.GetDriverByName(\"ESRI Shapefile\")\n        # Remove output shapefile if it already exists\n        if os.path.exists(outShapefile_csv):\n            outDriver.DeleteDataSource(outShapefile_csv)\n        # Create the output shapefile\n        outDataSource_csv = outDriver.CreateDataSource(outShapefile_csv)\n        out_lyr_name_csv = os.path.splitext(os.path.split(outShapefile_csv)[1])[0]\n        outLayer_csv = outDataSource_csv.CreateLayer(\n            out_lyr_name_csv, sp_out_srs, geom_type=ogr.wkbMultiPolygon\n        )\n        # Get the output Layer's Feature Definition\n        outLayerDefn_csv = outLayer_csv.GetLayerDefn()\n        # print(outLayerDefn)\n        # Add features to the ouput Layer\n        j = 0\n        for i, row in df_temp.iterrows():\n            # Create output Feature\n            outFeature_csv = ogr.Feature(outLayerDefn_csv)\n            # Set geometry coordinates\n            geom_out = point_buff_geodetic_wgs(\n                #-float(row.NCoord), float(row.ECoord), dis_radius\n                float(row.decimalLongitude) ,float(row.decimalLatitude),dis_radius\n            )  # float(row.DispersionRadius))\n            poly = ogr.CreateGeometryFromWkt(geom_out.wkt)\n            # print(poly)\n            multipolygon = ogr.Geometry(ogr.wkbMultiPolygon)\n            multipolygon.AddGeometry(poly)\n            outFeature_csv.SetGeometry(multipolygon)\n            # Add new feature to output Layer\n            outLayer_csv.CreateFeature(outFeature_csv)\n            j += 1\n            # inFeature.Destroy()\n        # Close DataSources\n        print(filename + \" has\" + str(j) + \" features\")\n        outDataSource_csv.Destroy()\n        grid_srs.AutoIdentifyEPSG()\n        subprocess.call(\n            [\n                \"ogr2ogr\",\n                \"-t_srs\",\n                \"EPSG:\" + str(grid_srs.GetAuthorityCode(None)),\n                outShapefile_csv[:-4] + \"_loc.shp\",\n                outShapefile_csv,\n            ]\n        )\nelse:\n    print(\"No valid imput for species occurences\")\n\n\n## C.2 rasterize the species occurrences (one file per species)\n\nfor shp in glob.glob(os.path.join(os.path.split(occurences)[0], \"sp_*loc.shp\")):\n\n    # Define NoData value of new raster\n    NoData_value = 0\n\n    # Filename of the raster Tiff that will be created\n    raster_fn = shp[:-4].replace(\"sp_\", \"s_\") + \".tif\"\n    print(raster_fn + \" raster processing\")\n    # Open the data source and read in the extent\n    source_ds = ogr.Open(shp)\n    source_layer = source_ds.GetLayer()\n    source_srs = source_layer.GetSpatialRef()\n\n    # Create the destination data source\n    x_res = int((x_max - x_min) / grid_size)\n    y_res = int((y_max - y_min) / grid_size)\n    target_ds = gdal.GetDriverByName(\"GTiff\").Create(\n        raster_fn, x_res, y_res, gdal.GDT_Byte\n    )\n    target_ds.SetGeoTransform((x_min, grid_size, 0, y_max, 0, -grid_size))\n    band = target_ds.GetRasterBand(1)\n    band.SetNoDataValue(NoData_value)\n    target_ds.SetProjection(source_srs.ExportToWkt())\n    # Rasterize\n    gdal.RasterizeLayer(\n        target_ds, [1], source_layer, burn_values=[1], options=[\"ALL_TOUCHED=TRUE\"]\n    )\n\n\n# C compute CIMPAL value based on habitat and occurence files\n##\n\nfor weight_matrix_csv in [weight_matrix_template]:\n    w = os.path.split(weight_matrix_csv)[1][:-4]\n    print(w)\n    with open(weight_matrix_csv, newline=\"\") as csvfile:\n        w_matrix = csv.reader(csvfile, delimiter=\"\\t\", quotechar=\"|\")\n        i = 0\n        for row in w_matrix:\n            print(f\"{row}\")\n            if i == 0:\n                habitat_names = [\n                    re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", x).lower() for x in row\n                ]\n                i += 1\n            else:\n                sp_name = re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", row[0]).lower()\n                sp_file = os.path.join(\n                    os.path.split(occurences)[0], \"s_{}_loc.tif\".format(sp_name)\n                )\n                if os.path.exists(sp_file):\n                    j = 0\n                    k = 1\n                    expression = []\n                    file_list = [sp_file]\n                    for habitat in row:\n                        if j > 0:\n                            if LAEA:\n                                hab_file = os.path.join(\n                                    biotopes, \"h_{}_LAEA.tif\".format(habitat_names[j])\n                                    )\n                            else:\n                                hab_file = os.path.join(\n                                    biotopes, \"h_{}.tif\".format(habitat_names[j])\n                                    )\n                            if os.path.exists(hab_file):\n                                if float(habitat) > 0:\n                                    k += 1\n                                    expression.append(\n                                        \"im1b1*im{0}b1*{1}\".format(k, habitat)\n                                    )\n                                    file_list.append(hab_file)\n                            else:\n                                print(\n                                    \"WARNING: no file for {}\".format(habitat_names[j])\n                                )\n                                expression.append(\"0\") #use zero in case a file is not found to avoid NoData rasters\n                            j += 1\n                        else:\n                            j += 1\n                    if len(file_list) > 0:\n                        if len(expression) == 0:\n                            expression = [\"0\"]\n                        outfile = os.path.join(\n                            outpath,\n                            \"impact_{0}_{1}.tif{2}\".format(\n                                sp_name,\n                                w,\n                                \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\",\n                            ),\n                        )\n                        print(\"+\".join(expression))\n                        subprocess.call(\n                            [\n                                otbbin + \"otbcli_BandMath\",\n                                \"-out\",\n                                outfile,\n                                \"-exp\",\n                                \"+\".join(expression),\n                                \"-il\",\n                            ]\n                            + file_list\n                        )\n                else:\n                    print(\"WARNING: no file for {}\".format(sp_name))\n    if filter_matrix_csv and os.path.exists(filter_matrix_csv):\n        with open(filter_matrix_csv, newline=\"\") as csvfile_f:\n            f_matrix = csv.reader(csvfile_f, delimiter=\"\\t\", quotechar=\"|\")\n            i = 0\n            for row in f_matrix:\n                if i == 0:\n                    sp_names = [re.sub(\"[^a-zA-Z0-9\\n\\.]\", \"_\", x).lower() for x in row]\n                    i += 1\n                    print(\"number of species \" + str(len(sp_names)))\n                else:\n                    j = 0\n                    k = 0\n                    expression = []\n                    sp_file_list = []\n                    for sp in row:\n                        if j > 0:\n                            impact_file = os.path.join(\n                                outpath, \"impact_{0}_{1}.tif\".format(sp_names[j], w)\n                            )\n                            if os.path.exists(impact_file):\n                                if float(sp) > 0:\n                                    k += 1\n                                    expression.append(\"im{0}b1\".format(k))\n                                    sp_file_list.append(impact_file)\n                            else:\n                                print(j)\n                                print(\"WARNING: no file for {}\".format(sp_names[j]))\n                                expression.append(\"0\") # add zero in case of missing file to avoid nodata in further calculations\n                            j += 1\n                        else:\n                            j += 1\n                    if len(sp_file_list) > 0:\n                        outfile = os.path.join(\n                            outpath,\n                            \"cimpal_{0}_{1}.tif{2}\".format(\n                                row[0],\n                                w,\n                                \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\",\n                            ),\n                        )\n                        subprocess.call(\n                            [\n                                otbbin + \"otbcli_BandMath\",\n                                \"-out\",\n                                outfile,\n                                \"-exp\",\n                                \"+\".join(expression),\n                                \"-il\",\n                            ]\n                            + sp_file_list\n                        )\n                    else:\n                        print(\"WARNING: no file for pathway {row[0]} and matrix {w}\")\n    else:\n        k = 1\n        expression = []\n        sp_file_list = []\n        for impact_file in glob.glob(\n            os.path.join(outpath, \"impact_*_{0}.tif\".format(w))\n        ):\n            expression.append(\"im{0}b1\".format(k))\n            sp_file_list.append(impact_file)\n            k += 1\n        if len(sp_file_list) > 0:\n            outfile = os.path.join(\n                outpath,\n                \"cimpal_all_{0}.tif{1}\".format(\n                    w, \"?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES\"\n                ),\n            )\n            subprocess.call(\n                [\n                    otbbin + \"otbcli_BandMath\",\n                    \"-out\",\n                    outfile,\n                    \"-exp\",\n                    \"+\".join(expression),\n                    \"-il\",\n                ]\n                + sp_file_list\n            )\n        else:\n            print(f\"WARNING: No impact files matrix {w}\")\ngrid_srs_out = Path(outpath, \"grid_srs_toWkt.txt\")\nf = open(grid_srs_out, mode=\"w+\")\nf.write(grid_srs.ExportToWkt())\nf.close()\n",
            "metadata": {
              "tags": []
            },
            "execution_count": 4,
            "outputs": [
              {
                "name": "stdout",
                "text": "=================================\nbiotopes /tmp/data/input/Cimpal_resources/\noutpath /tmp/data/output/Cimpal/\nweight_matrix_template /tmp/data/input/Cimpal_resources/weight_wp.csv\nfilter_matrix_csv /tmp/data/input/Cimpal_resources/CIMPAL_paths.csv\noccurences /tmp/data/input/Cimpal_resources/occurrence.txt\nalienTaxa /tmp/data/input/Cimpal_resources/alientaxa.txt\n=================================\n10\nreprojecting /tmp/data/input/Cimpal_resources/single_hab4.shp\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/osgeo/ogr.py:601: FutureWarning: Neither ogr.UseExceptions() nor ogr.DontUseExceptions() has been explicitly called. In GDAL 4.0, exceptions will be enabled by default.\n  warnings.warn(\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "reprojecting /tmp/data/input/Cimpal_resources/single_hab2.shp\nreprojecting /tmp/data/input/Cimpal_resources/single_hab3.shp\nreprojecting /tmp/data/input/Cimpal_resources/single_hab1.shp\nreprojecting /tmp/data/input/Cimpal_resources/single_hab5.shp\nFull extent based on input files\n[2722221.1799999997, 2790332.9399999995, 2101260.08, 2176181.42]\nPROJCS[\"ETRS89-extended / LAEA Europe\",GEOGCS[\"ETRS89\",DATUM[\"European_Terrestrial_Reference_System_1989\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6258\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4258\"]],PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],PARAMETER[\"latitude_of_center\",52],PARAMETER[\"longitude_of_center\",10],PARAMETER[\"false_easting\",4321000],PARAMETER[\"false_northing\",3210000],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Northing\",NORTH],AXIS[\"Easting\",EAST],AUTHORITY[\"EPSG\",\"3035\"]]\ncsv input\nthere are 11 items\nA 50.0\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "a has66 features\nB 100.0\nb has10 features\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "C 26.0\nc has11 features\nD 500.0\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "d has9 features\nG 15.0\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "g has20 features\nM 89.0\nm has14 features\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "P 123.0\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "p has78 features\nR 200.0\nr has9 features\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "S 500.0\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "s has37 features\nT 50.0\nt has7 features\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "U 50.0\nu has11 features\n/tmp/data/input/Cimpal_resources/s_p_loc.tif raster processing\n",
                "output_type": "stream"
              },
              {
                "name": "stderr",
                "text": "/opt/conda/envs/biotope/lib/python3.10/site-packages/shapely/ops.py:276: FutureWarning: This function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n  shell = type(geom.exterior)(zip(*func(*zip(*geom.exterior.coords))))\n",
                "output_type": "stream"
              },
              {
                "name": "stdout",
                "text": "/tmp/data/input/Cimpal_resources/s_m_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_g_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_b_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_r_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_c_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_a_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_u_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_t_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_s_loc.tif raster processing\n/tmp/data/input/Cimpal_resources/s_d_loc.tif raster processing\nweight_wp\n['scientificName', 'hab1', 'hab2', 'hab3', 'hab4', 'hab5', 'pel']\n['A', '0', '0', '1', '2', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*2+im1b1*im4b1*5+0\n2024-06-05 12:58:01 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:01 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:01 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:01 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:01 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:01 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:01 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:01 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:01 (INFO): File /tmp/data/output/Cimpal/impact_a_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_a_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['B', '0', '0', '1', '2', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*2+im1b1*im4b1*5+0\n2024-06-05 12:58:02 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:02 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:02 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:02 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:02 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:02 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:02 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:02 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:02 (INFO): File /tmp/data/output/Cimpal/impact_b_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_b_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['C', '0', '2', '1', '2', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*2+im1b1*im3b1*1+im1b1*im4b1*2+im1b1*im5b1*5+0\n2024-06-05 12:58:04 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:04 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:04 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:04 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:04 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:04 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:04 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:04 (INFO) BandMath: Image #5 has 1 components\n\n2024-06-05 12:58:04 (INFO): Estimated memory for full processing: 467.926MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:04 (INFO): File /tmp/data/output/Cimpal/impact_c_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_c_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['D', '0', '0', '1', '0', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*5+0\n2024-06-05 12:58:05 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:05 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:05 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:05 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:05 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:05 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:05 (INFO): Estimated memory for full processing: 343.136MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:05 (INFO): File /tmp/data/output/Cimpal/impact_d_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_d_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['G', '0', '0', '0', '0', '0', '0']\nWARNING: no file for pel\n0\n2024-06-05 12:58:06 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:06 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:06 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:06 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:06 (INFO): Estimated memory for full processing: 218.345MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:58:06 (INFO): File /tmp/data/output/Cimpal/impact_g_weight_wp.tif will be written in 1 blocks of 2727x2999 pixels\nWriting /tmp/data/output/Cimpal/impact_g_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (0s)\n['M', '0', '0', '5', '2', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*5+im1b1*im3b1*2+im1b1*im4b1*5+0\n2024-06-05 12:58:08 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:08 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:08 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:08 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:08 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:08 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:08 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:08 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:08 (INFO): File /tmp/data/output/Cimpal/impact_m_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_m_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['P', '0', '0', '1', '2', '3', '0']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*2+im1b1*im4b1*3+0\n2024-06-05 12:58:09 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:09 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:09 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:09 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:09 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:09 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:09 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:09 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:09 (INFO): File /tmp/data/output/Cimpal/impact_p_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_p_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['R', '0', '0', '1', '0', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*5+0\n2024-06-05 12:58:10 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:10 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:10 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:10 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:10 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:10 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:10 (INFO): Estimated memory for full processing: 343.136MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:10 (INFO): File /tmp/data/output/Cimpal/impact_r_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_r_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['S', '1', '0', '1', '2', '5', '0']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*1+im1b1*im4b1*2+im1b1*im5b1*5+0\n2024-06-05 12:58:12 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:12 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:12 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:12 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:12 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:12 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:12 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:12 (INFO) BandMath: Image #5 has 1 components\n\n2024-06-05 12:58:12 (INFO): Estimated memory for full processing: 467.926MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:12 (INFO): File /tmp/data/output/Cimpal/impact_s_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_s_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['T', '0', '0', '1', '3', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*3+im1b1*im4b1*5+0\n2024-06-05 12:58:13 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:13 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:13 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:13 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:13 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:13 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:13 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:13 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:13 (INFO): File /tmp/data/output/Cimpal/impact_t_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_t_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['T', '0', '0', '1', '2', '1', '0']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*2+im1b1*im4b1*1+0\n2024-06-05 12:58:15 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:15 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:15 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:15 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:15 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:15 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:15 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:15 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:15 (INFO): File /tmp/data/output/Cimpal/impact_t_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_t_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n['U', '0', '0', '1', '0', '5', '1']\nWARNING: no file for pel\nim1b1*im2b1*1+im1b1*im3b1*5+0\n2024-06-05 12:58:16 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:16 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:16 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:16 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:16 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:16 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:16 (INFO): Estimated memory for full processing: 343.136MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:16 (INFO): File /tmp/data/output/Cimpal/impact_u_weight_wp.tif will be written in 3 blocks of 2727x1002 pixels\nWriting /tmp/data/output/Cimpal/impact_u_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\nnumber of species 12\n2024-06-05 12:58:18 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:18 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:18 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:18 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:18 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:18 (INFO): Estimated memory for full processing: 280.741MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:18 (INFO): File /tmp/data/output/Cimpal/cimpal_CORRIDOR_weight_wp.tif will be written in 4 blocks of 1792x1792 pixels\nWriting /tmp/data/output/Cimpal/cimpal_CORRIDOR_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n2024-06-05 12:58:19 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:19 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:19 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:19 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:19 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:19 (INFO): Estimated memory for full processing: 280.741MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:19 (INFO): File /tmp/data/output/Cimpal/cimpal_ESCAPE_FROM_CONFINEMENT_weight_wp.tif will be written in 4 blocks of 1792x1792 pixels\nWriting /tmp/data/output/Cimpal/cimpal_ESCAPE_FROM_CONFINEMENT_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n2024-06-05 12:58:20 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:20 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:20 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:20 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:20 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:20 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:20 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:20 (INFO): Estimated memory for full processing: 405.531MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:20 (INFO): File /tmp/data/output/Cimpal/cimpal_RELEASE_IN_NATURE_weight_wp.tif will be written in 4 blocks of 1792x1792 pixels\nWriting /tmp/data/output/Cimpal/cimpal_RELEASE_IN_NATURE_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n2024-06-05 12:58:22 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:22 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:22 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:22 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #5 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #6 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #7 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #8 has 1 components\n\n2024-06-05 12:58:22 (INFO) BandMath: Image #9 has 1 components\n\n2024-06-05 12:58:22 (INFO): Estimated memory for full processing: 717.507MB (avail.: 256 MB), optimal image partitioning: 3 blocks\n2024-06-05 12:58:22 (INFO): File /tmp/data/output/Cimpal/cimpal_TRANSPORT_CONTAMINANT_weight_wp.tif will be written in 4 blocks of 1536x1536 pixels\nWriting /tmp/data/output/Cimpal/cimpal_TRANSPORT_CONTAMINANT_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n2024-06-05 12:58:24 (INFO) BandMath: Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:24 (INFO) BandMath: GDAL maximum cache size is 799 MB\n2024-06-05 12:58:24 (INFO) BandMath: OTB will use at most 4 threads\n2024-06-05 12:58:24 (INFO) BandMath: Image #1 has 1 components\n\n2024-06-05 12:58:24 (INFO) BandMath: Image #2 has 1 components\n\n2024-06-05 12:58:24 (INFO) BandMath: Image #3 has 1 components\n\n2024-06-05 12:58:24 (INFO) BandMath: Image #4 has 1 components\n\n2024-06-05 12:58:24 (INFO) BandMath: Image #5 has 1 components\n\n2024-06-05 12:58:24 (INFO): Estimated memory for full processing: 467.926MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:24 (INFO): File /tmp/data/output/Cimpal/cimpal_TRANSPORT_STOWAWAY_weight_wp.tif will be written in 4 blocks of 1792x1792 pixels\nWriting /tmp/data/output/Cimpal/cimpal_TRANSPORT_STOWAWAY_weight_wp.tif?&gdal:co:COMPRESS=LZW&gdal:co:TILED=YES&gdal:co:BIGTIFF=YES...: 100% [**************************************************] (1s)\n",
                "output_type": "stream"
              }
            ],
            "id": "9524d22b-0c63-4113-9164-863b39e932ec"
          }
        ]
      },
      "base_image": {
        "build": "ghcr.io/qcdis/naavre/naavre-cell-build-biotope:v0.14",
        "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-biotope:v0.14"
      },
      "image_version": "923f115"
    },
    "6": {
      "title": "cimpal-zonal-filter-gabriel-pelouze-lifewatch-eu",
      "task_name": "cimpal-zonal-filter-gabriel-pelouze-lifewatch-eu",
      "original_source": "conf_data_dir = '/tmp/data'\n\ngris_srs_to_Wkt_path = out_path + \"/grid_srs_toWkt.txt\"\nmaps_path = out_path\n\nshps_path = zones_file\n\n\ndef create_directory_if_not_exists(path):\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n            print(\"Directory created successfully at:\", path)\n        except OSError as e:\n            print(\"Error creating directory:\", e)\n    else:\n        print(\"Directory already exists at:\", path)\n\n\n\ncreate_directory_if_not_exists(f\"{conf_data_dir}/output/Zonal_out\")\nout_path2 = f\"{conf_data_dir}/output/Zonal_out\"\n\n\nspecies_para = True\n\n\n\n\n\n    \n\n\nos.environ['PROJ_LIB'] = '/usr/local/otb/share/proj/'\n\n\n\nshp_dir = shps_path\nshp_files = os.listdir(shp_dir)\n\nmaps_dir = maps_path\n\ngrid_srs_to_Wkt = gris_srs_to_Wkt_path\n\nif Path(grid_srs_to_Wkt).exists():\n    with open(grid_srs_to_Wkt, \"r\") as f:\n        grid_srs_to_Wkt = f.read()\n\nout = out_path2\n\nshp_file = None\n\nfor file in shp_files:\n    if file.endswith(\".shp\"):\n        shp_file = os.path.join(shp_dir, file)\n        break\n\nshp_zone = shp_file\n\nzone_field = param_zone_field_para\nzonal = Path(\"/usr/local/lw_apps/lwZonalStatistics\")\n\nraster_z = shp_zone[:-4] + \".tif\"\n\ntif_files = glob.glob(os.path.join(maps_dir, \"*.tif\"))\n\nhDataset = gdal.Open(tif_files[0], gdal.GA_ReadOnly)\nadfGeoTransform = hDataset.GetGeoTransform(can_return_null=True)\n\nif adfGeoTransform is not None:\n    dfGeoXUL = adfGeoTransform[0]\n    dfGeoYUL = adfGeoTransform[3]\n    dfGeoXLR = (\n        adfGeoTransform[0] + adfGeoTransform[1] * hDataset.RasterXSize + adfGeoTransform[2] * hDataset.RasterYSize\n    )\n    dfGeoYLR = (\n        adfGeoTransform[3] + adfGeoTransform[4] * hDataset.RasterXSize + adfGeoTransform[5] * hDataset.RasterYSize\n    )\n    xres = str(abs(adfGeoTransform[1]))\n    yres = str(abs(adfGeoTransform[5]))\n\noutshp = shp_zone[:-4] + \"_gridSRS.shp\"\n\nsubprocess.call([\"ogr2ogr\", \"-progress\", \"-t_srs\", grid_srs_to_Wkt, outshp, shp_zone])\nsubprocess.call(\n    [\n        \"gdal_rasterize\",\n        \"-a\",\n        zone_field,\n        \"-ot\",\n        \"uint16\",\n        \"-co\",\n        \"BIGTIFF=YES\",\n        \"-co\",\n        \"TILED=YES\",\n        \"-co\",\n        \"COMPRESS=DEFLATE\",\n        \"-te\",\n        str(dfGeoXUL),\n        str(dfGeoYLR),\n        str(dfGeoXLR),\n        str(dfGeoYUL),\n        \"-tr\",\n        str(xres),\n        str(yres),\n        outshp,\n        raster_z,\n    ]\n)\n\nif not species_para:\n    tif_files =[f for f in tif_files if 'cimpal_' in f]\n\nfor file in tif_files:\n    is_cimpal = True\n    print(f\"Running for: {file}\")\n    \n    tabular_out = Path(\n        out, os.path.split(file)[1][:-4] + \"_stat.csv\",\n    )\n    \n    print(f\"{str(tabular_out)}\")\n\n    subprocess.call([str(zonal), raster_z, file, tabular_out])",
      "types": {
        "out_path": "str",
        "zones_file": "str",
        "out_path2": "str",
        "param_zone_field_para": "str"
      },
      "inputs": [
        "out_path",
        "zones_file"
      ],
      "outputs": [
        "out_path2"
      ],
      "params": [
        "param_zone_field_para"
      ],
      "param_values": {
        "param_zone_field_para": "id"
      },
      "confs": {
        "conf_data_dir": "conf_data_dir = '/tmp/data'"
      },
      "all_inputs": [
        "out_path",
        "zones_file"
      ],
      "dependencies": [
        {
          "name": "Path",
          "asname": null,
          "module": "pathlib"
        },
        {
          "name": "gdal",
          "asname": null,
          "module": "osgeo"
        },
        {
          "name": "glob",
          "asname": null,
          "module": ""
        },
        {
          "name": "os",
          "asname": null,
          "module": ""
        },
        {
          "name": "subprocess",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "d361823": {
            "id": "d361823",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "cimpal-zonal-filter-gabriel-pelouze-lifewatch-eu",
              "vars": [
                {
                  "name": "out_path",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#6c96e0"
                },
                {
                  "name": "zones_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#8bac53"
                },
                {
                  "name": "out_path2",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#d27988"
                }
              ],
              "params": [
                "param_zone_field_para"
              ],
              "inputs": [
                "out_path",
                "zones_file"
              ],
              "outputs": [
                "out_path2"
              ],
              "og_node_id": "d361823"
            },
            "ports": {
              "out_path": {
                "properties": {
                  "color": "#6c96e0"
                },
                "id": "out_path",
                "type": "left"
              },
              "zones_file": {
                "properties": {
                  "color": "#8bac53"
                },
                "id": "zones_file",
                "type": "left"
              },
              "out_path2": {
                "properties": {
                  "color": "#d27988"
                },
                "id": "out_path2",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "d361823",
      "container_source": "from pathlib import Path\nfrom osgeo import gdal\nimport glob\nimport os\nimport subprocess\n\nimport argparse\nimport json\narg_parser = argparse.ArgumentParser()\n\narg_parser.add_argument('--id', action='store',\n                        type=str, required=True, dest='id')\n\n\narg_parser.add_argument('--out_path', action='store',\n                        type=str, required=True, dest='out_path')\n\narg_parser.add_argument('--zones_file', action='store',\n                        type=str, required=True, dest='zones_file')\n\narg_parser.add_argument('--param_zone_field_para', action='store',\n                        type=str, required=True, dest='param_zone_field_para')\n\nargs = arg_parser.parse_args()\nprint(args)\n\nid = args.id\n\nout_path = args.out_path.replace('\"', '')\nzones_file = args.zones_file.replace('\"', '')\n\nparam_zone_field_para = args.param_zone_field_para.replace('\"', '')\n\nconf_data_dir = '/tmp/data'\n\n\nconf_data_dir = '/tmp/data'\n\ngris_srs_to_Wkt_path = out_path + \"/grid_srs_toWkt.txt\"\nmaps_path = out_path\n\nshps_path = zones_file\n\n\ndef create_directory_if_not_exists(path):\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n            print(\"Directory created successfully at:\", path)\n        except OSError as e:\n            print(\"Error creating directory:\", e)\n    else:\n        print(\"Directory already exists at:\", path)\n\n\ncreate_directory_if_not_exists(f\"{conf_data_dir}/output/Zonal_out\")\nout_path2 = f\"{conf_data_dir}/output/Zonal_out\"\n\n\nspecies_para = True\n\n\nos.environ['PROJ_LIB'] = '/usr/local/otb/share/proj/'\n\n\nshp_dir = shps_path\nshp_files = os.listdir(shp_dir)\n\nmaps_dir = maps_path\n\ngrid_srs_to_Wkt = gris_srs_to_Wkt_path\n\nif Path(grid_srs_to_Wkt).exists():\n    with open(grid_srs_to_Wkt, \"r\") as f:\n        grid_srs_to_Wkt = f.read()\n\nout = out_path2\n\nshp_file = None\n\nfor file in shp_files:\n    if file.endswith(\".shp\"):\n        shp_file = os.path.join(shp_dir, file)\n        break\n\nshp_zone = shp_file\n\nzone_field = param_zone_field_para\nzonal = Path(\"/usr/local/lw_apps/lwZonalStatistics\")\n\nraster_z = shp_zone[:-4] + \".tif\"\n\ntif_files = glob.glob(os.path.join(maps_dir, \"*.tif\"))\n\nhDataset = gdal.Open(tif_files[0], gdal.GA_ReadOnly)\nadfGeoTransform = hDataset.GetGeoTransform(can_return_null=True)\n\nif adfGeoTransform is not None:\n    dfGeoXUL = adfGeoTransform[0]\n    dfGeoYUL = adfGeoTransform[3]\n    dfGeoXLR = (\n        adfGeoTransform[0] + adfGeoTransform[1] *\n        hDataset.RasterXSize + adfGeoTransform[2] * hDataset.RasterYSize\n    )\n    dfGeoYLR = (\n        adfGeoTransform[3] + adfGeoTransform[4] *\n        hDataset.RasterXSize + adfGeoTransform[5] * hDataset.RasterYSize\n    )\n    xres = str(abs(adfGeoTransform[1]))\n    yres = str(abs(adfGeoTransform[5]))\n\noutshp = shp_zone[:-4] + \"_gridSRS.shp\"\n\nsubprocess.call([\"ogr2ogr\", \"-progress\", \"-t_srs\",\n                grid_srs_to_Wkt, outshp, shp_zone])\nsubprocess.call(\n    [\n        \"gdal_rasterize\",\n        \"-a\",\n        zone_field,\n        \"-ot\",\n        \"uint16\",\n        \"-co\",\n        \"BIGTIFF=YES\",\n        \"-co\",\n        \"TILED=YES\",\n        \"-co\",\n        \"COMPRESS=DEFLATE\",\n        \"-te\",\n        str(dfGeoXUL),\n        str(dfGeoYLR),\n        str(dfGeoXLR),\n        str(dfGeoYUL),\n        \"-tr\",\n        str(xres),\n        str(yres),\n        outshp,\n        raster_z,\n    ]\n)\n\nif not species_para:\n    tif_files = [f for f in tif_files if 'cimpal_' in f]\n\nfor file in tif_files:\n    is_cimpal = True\n    print(f\"Running for: {file}\")\n\n    tabular_out = Path(\n        out, os.path.split(file)[1][:-4] + \"_stat.csv\",\n    )\n\n    print(f\"{str(tabular_out)}\")\n\n    subprocess.call([str(zonal), raster_z, file, tabular_out])\n\nfile_out_path2 = open(\"/tmp/out_path2_\" + id + \".json\", \"w\")\nfile_out_path2.write(json.dumps(out_path2))\nfile_out_path2.close()\n",
      "kernel": "ipython",
      "notebook_dict": {
        "metadata": {
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "toc-autonumbering": true,
          "kernelspec": {
            "name": "python3",
            "display_name": "python3",
            "language": "python3"
          },
          "language_info": {
            "name": "python",
            "version": "3.10.14",
            "mimetype": "text/x-python",
            "codemirror_mode": {
              "name": "ipython",
              "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# cimpal-zonal-filter\n\ngris_srs_to_Wkt_path = out_path + \"/grid_srs_toWkt.txt\"\nmaps_path = out_path\n\nshps_path = zones_file\n\nimport os\n\ndef create_directory_if_not_exists(path):\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n            print(\"Directory created successfully at:\", path)\n        except OSError as e:\n            print(\"Error creating directory:\", e)\n    else:\n        print(\"Directory already exists at:\", path)\n\n\n\ncreate_directory_if_not_exists(f\"{conf_data_dir}/output/Zonal_out\")\nout_path2 = f\"{conf_data_dir}/output/Zonal_out\"\n\n\nspecies_para = True\n\n\n# -*- coding: utf-8 -*-\n##\"\"\"\n##LIFEWATCH_ZONAL_STATISTICS - Copyright (C) <2021>  Université catholique de Louvain (UCLouvain), Belgique,\n##\n##\n##\n##List of the contributors to the development of LIFEWATCH_CIMPAL: see LICENSE file.\n##Description and complete License: see LICENSE file.\n##\n##This program (LIFEWATCH_ZONAL_STATISTICS) is free software:\n##you can redistribute it and/or modify it under the terms of the\n##GNU General Public License as published by the Free Software\n##Foundation, either version 3 of the License, or (at your option)\n##any later version.\n##This program is distributed in the hope that it will be useful,\n##but WITHOUT ANY WARRANTY; without even the implied warranty of\n##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n##GNU General Public License for more details.\n##You should have received a copy of the GNU General Public License\n##along with this program (see COPYING file).  If not,\n##see <http://www.gnu.org/licenses/>.\n##\"\"\"\n\n##\nimport subprocess, glob\nimport os\n\nfrom osgeo import gdal\n\n    \nfrom pathlib import Path\n\nimport argparse\n\nos.environ['PROJ_LIB'] = '/usr/local/otb/share/proj/'\n\n# parser = argparse.ArgumentParser(description=\"Biotope Cimpal Calculator\")\n\n# parser.add_argument(\"-s\", \"--shps\", type=str, help=\"Shps Dir\", required=True)\n# parser.add_argument(\"-m\", \"--maps\", type=str, help=\"Maps Dir\", required=True)\n# parser.add_argument(\"-zf\", \"--zone_field\", type=str, help=\"Zone field id\", required=True)\n# parser.add_argument(\"-srs\", \"--gris_srs_to_Wkt\", type=str, help=\"grid srs txt\", required=True)\n# parser.add_argument(\"-o\", \"--out\", type=str, help=\"Out dir\", required=True)\n# parser.add_argument(\"-sp\", \"--species\", type=bool, help=\"Run Zonal on species files as well\", default=True)\n\n# args = parser.parse_args()\nshp_dir = shps_path\nshp_files = os.listdir(shp_dir)\n\nmaps_dir = maps_path\n\ngrid_srs_to_Wkt = gris_srs_to_Wkt_path\n\nif Path(grid_srs_to_Wkt).exists():\n    with open(grid_srs_to_Wkt, \"r\") as f:\n        grid_srs_to_Wkt = f.read()\n\nout = out_path2\n\nshp_file = None\n\nfor file in shp_files:\n    if file.endswith(\".shp\"):\n        shp_file = os.path.join(shp_dir, file)\n        break\n\n# get input file names from orchestrator\nshp_zone = shp_file\n\nzone_field = param_zone_field_para\nzonal = Path(\"/usr/local/lw_apps/lwZonalStatistics\")\n\n# Filename of the raster Tiff that will be created\nraster_z = shp_zone[:-4] + \".tif\"\n\ntif_files = glob.glob(os.path.join(maps_dir, \"*.tif\"))\n\n#get the characteristics of the file \nhDataset = gdal.Open(tif_files[0], gdal.GA_ReadOnly)\nadfGeoTransform = hDataset.GetGeoTransform(can_return_null=True)\n\nif adfGeoTransform is not None:\n    dfGeoXUL = adfGeoTransform[0]\n    dfGeoYUL = adfGeoTransform[3]\n    dfGeoXLR = (\n        adfGeoTransform[0] + adfGeoTransform[1] * hDataset.RasterXSize + adfGeoTransform[2] * hDataset.RasterYSize\n    )\n    dfGeoYLR = (\n        adfGeoTransform[3] + adfGeoTransform[4] * hDataset.RasterXSize + adfGeoTransform[5] * hDataset.RasterYSize\n    )\n    xres = str(abs(adfGeoTransform[1]))\n    yres = str(abs(adfGeoTransform[5]))\n\n# Project to the same coordinate system than the grid\noutshp = shp_zone[:-4] + \"_gridSRS.shp\"\n\nsubprocess.call([\"ogr2ogr\", \"-progress\", \"-t_srs\", grid_srs_to_Wkt, outshp, shp_zone])\nsubprocess.call(\n    [\n        \"gdal_rasterize\",\n        \"-a\",\n        zone_field,\n        \"-ot\",\n        \"uint16\",\n        \"-co\",\n        \"BIGTIFF=YES\",\n        \"-co\",\n        \"TILED=YES\",\n        \"-co\",\n        \"COMPRESS=DEFLATE\",\n        \"-te\",\n        str(dfGeoXUL),\n        str(dfGeoYLR),\n        str(dfGeoXLR),\n        str(dfGeoYUL),\n        \"-tr\",\n        str(xres),\n        str(yres),\n        outshp,\n        raster_z,\n    ]\n)\n\nif not species_para:\n    tif_files =[f for f in tif_files if 'cimpal_' in f]\n\nfor file in tif_files:\n    is_cimpal = True\n    print(f\"Running for: {file}\")\n    \n    tabular_out = Path(\n        out, os.path.split(file)[1][:-4] + \"_stat.csv\",\n    )\n    \n    print(f\"{str(tabular_out)}\")\n\n    subprocess.call([str(zonal), raster_z, file, tabular_out])",
            "metadata": {},
            "execution_count": 5,
            "outputs": [
              {
                "name": "stdout",
                "text": "Directory created successfully at: /tmp/data/output/Zonal_out\n0...10...20...30...40...50...60...70...80...90...100 - done.\n0...10...20...30...40...50...60...70...80...90...100 - done.\nRunning for: /tmp/data/output/Cimpal/cimpal_CORRIDOR_weight_wp.tif\n/tmp/data/output/Zonal_out/cimpal_CORRIDOR_weight_wp_stat.csv\n2024-06-05 12:58:26 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:26 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:58:26 (INFO): OTB will use at most 4 threads\n2024-06-05 12:58:26 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:58:26 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:58:27 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:27 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_b_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_b_weight_wp_stat.csv\n2024-06-05 12:58:41 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:41 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:58:41 (INFO): OTB will use at most 4 threads\n2024-06-05 12:58:41 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:58:41 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:58:42 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:42 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/cimpal_TRANSPORT_CONTAMINANT_weight_wp.tif\n/tmp/data/output/Zonal_out/cimpal_TRANSPORT_CONTAMINANT_weight_wp_stat.csv\n2024-06-05 12:58:56 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:58:56 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:58:56 (INFO): OTB will use at most 4 threads\n2024-06-05 12:58:56 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:58:56 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:58:56 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:58:56 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_s_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_s_weight_wp_stat.csv\n2024-06-05 12:59:10 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:59:10 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:59:10 (INFO): OTB will use at most 4 threads\n2024-06-05 12:59:10 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:59:10 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:59:11 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:59:11 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_g_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_g_weight_wp_stat.csv\n2024-06-05 12:59:24 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:59:24 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:59:24 (INFO): OTB will use at most 4 threads\n2024-06-05 12:59:24 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:59:24 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:59:25 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:59:25 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_p_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_p_weight_wp_stat.csv\n2024-06-05 12:59:39 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:59:39 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:59:39 (INFO): OTB will use at most 4 threads\n2024-06-05 12:59:39 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:59:39 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:59:40 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:59:40 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_d_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_d_weight_wp_stat.csv\n2024-06-05 12:59:54 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 12:59:54 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 12:59:54 (INFO): OTB will use at most 4 threads\n2024-06-05 12:59:54 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 12:59:54 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 12:59:55 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 12:59:55 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_u_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_u_weight_wp_stat.csv\n2024-06-05 13:00:08 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:00:08 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:00:08 (INFO): OTB will use at most 4 threads\n2024-06-05 13:00:08 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:00:08 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:00:09 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:00:09 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_c_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_c_weight_wp_stat.csv\n2024-06-05 13:00:23 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:00:23 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:00:23 (INFO): OTB will use at most 4 threads\n2024-06-05 13:00:23 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:00:23 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:00:24 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:00:24 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_m_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_m_weight_wp_stat.csv\n2024-06-05 13:00:37 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:00:37 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:00:37 (INFO): OTB will use at most 4 threads\n2024-06-05 13:00:37 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:00:37 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:00:38 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:00:38 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_t_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_t_weight_wp_stat.csv\n2024-06-05 13:00:52 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:00:52 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:00:52 (INFO): OTB will use at most 4 threads\n2024-06-05 13:00:52 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:00:52 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:00:53 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:00:53 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_a_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_a_weight_wp_stat.csv\n2024-06-05 13:01:07 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:01:07 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:01:07 (INFO): OTB will use at most 4 threads\n2024-06-05 13:01:07 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:01:07 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:01:08 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:01:08 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/cimpal_RELEASE_IN_NATURE_weight_wp.tif\n/tmp/data/output/Zonal_out/cimpal_RELEASE_IN_NATURE_weight_wp_stat.csv\n2024-06-05 13:01:21 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:01:21 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:01:21 (INFO): OTB will use at most 4 threads\n2024-06-05 13:01:21 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:01:21 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:01:22 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:01:22 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/cimpal_TRANSPORT_STOWAWAY_weight_wp.tif\n/tmp/data/output/Zonal_out/cimpal_TRANSPORT_STOWAWAY_weight_wp_stat.csv\n2024-06-05 13:01:36 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:01:36 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:01:36 (INFO): OTB will use at most 4 threads\n2024-06-05 13:01:36 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:01:36 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:01:36 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:01:36 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/cimpal_ESCAPE_FROM_CONFINEMENT_weight_wp.tif\n/tmp/data/output/Zonal_out/cimpal_ESCAPE_FROM_CONFINEMENT_weight_wp_stat.csv\n2024-06-05 13:01:50 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:01:50 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:01:50 (INFO): OTB will use at most 4 threads\n2024-06-05 13:01:50 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:01:50 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:01:51 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:01:51 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\nRunning for: /tmp/data/output/Cimpal/impact_r_weight_wp.tif\n/tmp/data/output/Zonal_out/impact_r_weight_wp_stat.csv\n2024-06-05 13:02:05 (INFO): Default RAM limit for OTB is 256 MB\n2024-06-05 13:02:05 (INFO): GDAL maximum cache size is 799 MB\n2024-06-05 13:02:05 (INFO): OTB will use at most 4 threads\n2024-06-05 13:02:05 (INFO): Estimated memory for full processing: 187.11MB (avail.: 256 MB), optimal image partitioning: 1 blocks\n2024-06-05 13:02:05 (INFO): Estimation will be performed in 1 blocks of 2727x2999 pixels\nelements in set 1\nUnique Filter updated (size is 1)\n2024-06-05 13:02:06 (INFO): Estimated memory for full processing: 499.01MB (avail.: 256 MB), optimal image partitioning: 2 blocks\n2024-06-05 13:02:06 (INFO): Estimation will be performed in 4 blocks of 1792x1792 pixels\nZonal Filter updated\n",
                "output_type": "stream"
              }
            ],
            "id": "590aca50-5ba0-4f78-a234-eea345dc25ac"
          }
        ]
      },
      "base_image": {
        "build": "ghcr.io/qcdis/naavre/naavre-cell-build-biotope:v0.14",
        "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-biotope:v0.14"
      },
      "image_version": "5ca71c4"
    },
    "8": {
      "title": "cimpal-upload-results-gabriel-pelouze-lifewatch-eu",
      "task_name": "cimpal-upload-results-gabriel-pelouze-lifewatch-eu",
      "original_source": "\n\nminio_client = Minio(param_s3_server, access_key=param_s3_access_key, secret_key=param_s3_secret_key, secure=True)\n\nunique_folder = str(uuid.uuid4())\n\nfor filename in os.listdir(out_path2):\n    file_path = f\"{out_path2}/{filename}\"\n    dir_basename = os.path.basename(out_path2)\n    user_prefix = param_s3_prefix_output[:-1]\n    object_name = f\"{user_prefix}/{unique_folder}/{dir_basename}/{filename}\"\n    print(\"Uploading\", file_path, \"->\", object_name)\n    minio_client.fput_object(param_s3_bucket_output, object_name=object_name, file_path=file_path)\n\nprint(\n    f\"Files uploaded to https://{param_s3_server.replace('9000', '9001')}\"\n    f\"/browser\"\n    f\"/{param_s3_bucket_output}\"\n    f\"/{base64.b64encode(f'{user_prefix}/{unique_folder}/'.encode()).decode()}\")",
      "types": {
        "out_path2": "str",
        "param_s3_server": "str",
        "param_s3_access_key": "str",
        "param_s3_secret_key": "str",
        "param_s3_prefix_output": "str",
        "param_s3_bucket_output": "str"
      },
      "inputs": [
        "out_path2"
      ],
      "outputs": [],
      "params": [
        "param_s3_server",
        "param_s3_access_key",
        "param_s3_secret_key",
        "param_s3_prefix_output",
        "param_s3_bucket_output"
      ],
      "param_values": {
        "param_s3_server": "scruffy.lab.uvalight.net:9000",
        "param_s3_access_key": "vl-biodt-demo",
        "param_s3_secret_key": "",
        "param_s3_prefix_output": "vl-biodt-demo/",
        "param_s3_bucket_output": "naa-vre-user-data"
      },
      "confs": {},
      "all_inputs": [
        "out_path2"
      ],
      "dependencies": [
        {
          "name": "Minio",
          "asname": null,
          "module": "minio"
        },
        {
          "name": "base64",
          "asname": null,
          "module": ""
        },
        {
          "name": "os",
          "asname": null,
          "module": ""
        },
        {
          "name": "uuid",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "4b0b9e7": {
            "id": "4b0b9e7",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "cimpal-upload-results-gabriel-pelouze-lifewatch-eu",
              "vars": [
                {
                  "name": "out_path2",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#d27988"
                }
              ],
              "params": [
                "param_s3_server",
                "param_s3_access_key",
                "param_s3_secret_key",
                "param_s3_prefix_output",
                "param_s3_bucket_output"
              ],
              "inputs": [
                "out_path2"
              ],
              "outputs": [],
              "og_node_id": "4b0b9e7"
            },
            "ports": {
              "out_path2": {
                "properties": {
                  "color": "#d27988"
                },
                "id": "out_path2",
                "type": "left"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "4b0b9e7",
      "container_source": "from minio import Minio\nimport base64\nimport os\nimport uuid\n\nimport argparse\nimport json\narg_parser = argparse.ArgumentParser()\n\narg_parser.add_argument('--id', action='store',\n                        type=str, required=True, dest='id')\n\n\narg_parser.add_argument('--out_path2', action='store',\n                        type=str, required=True, dest='out_path2')\n\narg_parser.add_argument('--param_s3_access_key', action='store',\n                        type=str, required=True, dest='param_s3_access_key')\narg_parser.add_argument('--param_s3_bucket_output', action='store',\n                        type=str, required=True, dest='param_s3_bucket_output')\narg_parser.add_argument('--param_s3_prefix_output', action='store',\n                        type=str, required=True, dest='param_s3_prefix_output')\narg_parser.add_argument('--param_s3_secret_key', action='store',\n                        type=str, required=True, dest='param_s3_secret_key')\narg_parser.add_argument('--param_s3_server', action='store',\n                        type=str, required=True, dest='param_s3_server')\n\nargs = arg_parser.parse_args()\nprint(args)\n\nid = args.id\n\nout_path2 = args.out_path2.replace('\"', '')\n\nparam_s3_access_key = args.param_s3_access_key.replace('\"', '')\nparam_s3_bucket_output = args.param_s3_bucket_output.replace('\"', '')\nparam_s3_prefix_output = args.param_s3_prefix_output.replace('\"', '')\nparam_s3_secret_key = args.param_s3_secret_key.replace('\"', '')\nparam_s3_server = args.param_s3_server.replace('\"', '')\n\n\nminio_client = Minio(param_s3_server, access_key=param_s3_access_key,\n                     secret_key=param_s3_secret_key, secure=True)\n\nunique_folder = str(uuid.uuid4())\n\nfor filename in os.listdir(out_path2):\n    file_path = f\"{out_path2}/{filename}\"\n    dir_basename = os.path.basename(out_path2)\n    user_prefix = param_s3_prefix_output[:-1]\n    object_name = f\"{user_prefix}/{unique_folder}/{dir_basename}/{filename}\"\n    print(\"Uploading\", file_path, \"->\", object_name)\n    minio_client.fput_object(param_s3_bucket_output,\n                             object_name=object_name, file_path=file_path)\n\nprint(\n    f\"Files uploaded to https://{param_s3_server.replace('9000', '9001')}\"\n    f\"/browser\"\n    f\"/{param_s3_bucket_output}\"\n    f\"/{base64.b64encode(f'{user_prefix}/{unique_folder}/'.encode()).decode()}\")\n",
      "kernel": "ipython",
      "notebook_dict": {
        "metadata": {
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "toc-autonumbering": true,
          "kernelspec": {
            "name": "python3",
            "display_name": "python3",
            "language": "python3"
          },
          "language_info": {
            "name": "python",
            "version": "3.10.14",
            "mimetype": "text/x-python",
            "codemirror_mode": {
              "name": "ipython",
              "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# cimpal-upload-results\n\nimport base64\nimport os\nimport uuid\nfrom minio import Minio\n\nminio_client = Minio(param_s3_server, access_key=param_s3_access_key, secret_key=param_s3_secret_key, secure=True)\n\nunique_folder = str(uuid.uuid4())\n\nfor filename in os.listdir(out_path2):\n    file_path = f\"{out_path2}/{filename}\"\n    dir_basename = os.path.basename(out_path2)\n    user_prefix = param_s3_prefix_output[:-1]\n    object_name = f\"{user_prefix}/{unique_folder}/{dir_basename}/{filename}\"\n    print(\"Uploading\", file_path, \"->\", object_name)\n    minio_client.fput_object(param_s3_bucket_output, object_name=object_name, file_path=file_path)\n\nprint(\n    f\"Files uploaded to https://{param_s3_server.replace('9000', '9001')}\"\n    f\"/browser\"\n    f\"/{param_s3_bucket_output}\"\n    f\"/{base64.b64encode(f'{user_prefix}/{unique_folder}/'.encode()).decode()}\")",
            "metadata": {},
            "execution_count": 24,
            "outputs": [
              {
                "name": "stdout",
                "text": "Uploading /tmp/data/output/Zonal_out/impact_u_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_u_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_s_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_s_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_m_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_m_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_t_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_t_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_b_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_b_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/cimpal_ESCAPE_FROM_CONFINEMENT_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/cimpal_ESCAPE_FROM_CONFINEMENT_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/cimpal_CORRIDOR_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/cimpal_CORRIDOR_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/cimpal_RELEASE_IN_NATURE_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/cimpal_RELEASE_IN_NATURE_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_c_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_c_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_g_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_g_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/cimpal_TRANSPORT_CONTAMINANT_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/cimpal_TRANSPORT_CONTAMINANT_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_a_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_a_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_d_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_d_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_p_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_p_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/cimpal_TRANSPORT_STOWAWAY_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/cimpal_TRANSPORT_STOWAWAY_weight_wp_stat.csv\nUploading /tmp/data/output/Zonal_out/impact_r_weight_wp_stat.csv -> vl-biodt-demo/ba225044-7ec5-4dd8-9feb-fd6e95714f87/Zonal_out/impact_r_weight_wp_stat.csv\nFiles uploaded to https://scruffy.lab.uvalight.net:9001/browser/naa-vre-user-data/dmwtYmlvZHQtZGVtby9iYTIyNTA0NC03ZWM1LTRkZDgtOWZlYi1mZDZlOTU3MTRmODcv\n",
                "output_type": "stream"
              }
            ],
            "id": "b17ba9b2-c6ea-4bef-94da-03d15f2c2786"
          }
        ]
      },
      "base_image": {
        "build": "ghcr.io/qcdis/naavre/naavre-cell-build-biotope:v0.14",
        "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-biotope:v0.14"
      },
      "image_version": "769fad2"
    }
  }
}
